---
swagger: "2.0"
info:
  description: 'TODO: Add a description'
  version: "1.0"
  title: Dr. Max IPF
host: ipf.dr-max.global
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /eShop-services/api/v1/order:
    put:
      tags:
      - Shop
      summary: Create Order
      description: |-
        Creates new order object, in case of _Reservation type_ is passed into pharmacy (Farmis instance).
        Reservation object already exists in EShop DB and it is passed as a request body of this call.
      operationId: EShopServicesApiV1OrderPut
      produces:
      - application/json
      parameters:
      - name: orderId
        in: query
        description: Id of the order. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /eShop-services/api/v1/order/{orderId}:
    get:
      tags:
      - Shop
      summary: Get Order
      description: In case of eShop returns order object to the client. It retrieves the order object from EShop DB. (For now will be used for operations and monitoring purposses as weel as for debuging of issue)
      operationId: EShopServicesApiV1OrderByOrderIdGet
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: Id of the order. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/OrderWithCommonResponse'
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
      - Shop
      summary: Delete Order
      description: |-
        In Case of Reservation Type:
        Calls respective EShop and Farmis instance to delete the reservation objects in pharmacy.
        In Case of eShop destroy the persisted data on IPF, in future should be passed to other BackEnds
      operationId: EShopServicesApiV1OrderByOrderIdDelete
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: Id of the order. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: DELETE
          uri: /eShop-services/api/v1/order/123
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Delete Order1
        x-testDescription: |-
          In Case of Reservation Type:
          Calls respective EShop and Farmis instance to delete the reservation objects in pharmacy.
          In Case of eShop destroy the persisted data on IPF, in future should be passed to other BackEnds
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /eShop-services/api/v1/order/{orderId}/status:
    put:
      tags:
      - Shop
      summary: Update Order Status
      description: "Updates Order Status.\nIn case of Reservation Type: \nReservation\
        \ Status can be updated during reservation processing.\n- Reservation Status\
        \ has the value `Requested` when the reservation was created in EShop and\
        \ sent to respective Farmis instance via IPF.\n- Reservation Status can be\
        \ updated by Farmis. In this case, the reservation status value can be updated\
        \ to `PreparedForExpedition`, `Completed`, `Cancelled` or `InTrouble`.\n-\
        \ Reservation Status update can be updated by call centre when the reservation\
        \ has status `InTrouble`. In this case, the reservation status can be updated\
        \ to `Requested` or `Cancelled`.\nIn case of eShop Type:\nTODO:\nThe Order\
        \ life cycle should be described"
      operationId: EShopServicesApiV1OrderStatusByOrderIdPut
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: Id of the order. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/OrderStatusRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /eShop-services/api/v1/order/123/status
          headers:
            Content-Type: application/json
          body: '{  "orderStatus": "PreparedForExpedition",  "note": "OK",  "userName":
            "novak01"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Order Status1
        x-testDescription: "Updates Order Status.\nIn case of Reservation Type: \n\
          Reservation Status can be updated during reservation processing.\n- Reservation\
          \ Status has the value `Requested` when the reservation was created in EShop\
          \ and sent to respective Farmis instance via IPF.\n- Reservation Status\
          \ can be updated by Farmis. In this case, the reservation status value can\
          \ be updated to `PreparedForExpedition`, `Completed`, `Cancelled` or `InTrouble`.\n\
          - Reservation Status update can be updated by call centre when the reservation\
          \ has status `InTrouble`. In this case, the reservation status can be updated\
          \ to `Requested` or `Cancelled`.\nIn case of eShop Type:\nTODO:\nThe Order\
          \ life cycle should be described"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /eShop-services/api/v1/stock/{productId}:
    get:
      tags:
      - Shop
      summary: Get availability of Specified Product
      description: Returns stock items of specified product
      operationId: EShopServicesApiV1StockByProductIdGet
      produces:
      - application/json
      parameters:
      - name: productId
        in: path
        description: Id of the product. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              productId: 666111
              availableQuantity: 6
              availabilityType: Stock
              availabilityOnPharmacies:
              - pharmacyId: 666111
                availableQuantity: 6
                providesReservation: true
                isUpToDate: true
          schema:
            $ref: '#/definitions/GetAvailabilityOfSpecifiedProductResponse'
      x-unitTests:
      - request:
          method: GET
          uri: /eShop-services/api/v1/stock/123
          headers:
            Content-Type: application/json
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "productId":
            666111,  "availableQuantity": 6,  "availabilityType": "Stock",  "availabilityOnPharmacies":
            [    {      "pharmacyId": 666111,      "availableQuantity": 6,      "providesReservation":
            true,      "isUpToDate": true    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get availability of Specified Product1
        x-testDescription: Returns stock items of specified product
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /eShop-services/api/v1/stock/:
    post:
      tags:
      - Shop
      summary: Get availability of Specified Product list
      description: Returns stock items of specified product(s)
      operationId: EShopServicesApiV1StockPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/ListOfProducts'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              item:
              - productId: 666111
                availableQuantity: 6
                availabilityType: Stock
                availabilityOnPharmacies:
                - pharmacyId: 666111
                  availableQuantity: 6
                  providesReservation: true
                  isUpToDate: true
          schema:
            $ref: '#/definitions/GetAvailabilityOfSpecifiedProductListResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /eShop-services/api/v1/stock/
          headers:
            Content-Type: application/json
          body: '{  "productId": [    "123"  ]}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "item":
            [    {      "productId": 666111,      "availableQuantity": 6,      "availabilityType":
            "Stock",      "availabilityOnPharmacies": [        {          "pharmacyId":
            666111,          "availableQuantity": 6,          "providesReservation":
            true,          "isUpToDate": true        }      ]    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get availability of Specified Product list1
        x-testDescription: Returns stock items of specified product(s)
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /reservation-services/api/v1/reservation:
    put:
      tags:
      - Reservation
      summary: Create Reservation
      description: |-
        Creates new reservation in pharmacy (Farmis instance).
        Reservation object already exists in EShop DB and it is passed as a request body of this call.
      operationId: ReservationServicesApiV1ReservationPut
      produces:
      - application/json
      parameters:
      - name: reservationId
        in: query
        description: Id of the reservation. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/Reservation'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /reservation-services/api/v1/reservation?reservationId=123
          headers:
            Content-Type: application/json
          body: '{  "reservationId": 123,  "dateTimeCreated": "2017-04-10T12:34:00.000Z",  "dateTimeLastUpdated":
            "2017-04-10T12:34:00.000Z",  "dateTimeReservationEnd": "2017-04-15T12:34:00.000Z",  "status":
            "Requested",  "pharmacyId": 55,  "customerId": 123,  "customerLoyaltyCardId":
            "123",  "customerFirstName": "Jan",  "customerLastName": "Novák",  "customerStreet":
            "Dlouhá 21",  "customerTown": "Praha",  "customerEmail": "jan.novak@example.com",  "customerPhone":
            "+420777123456",  "customerNote": "Note from the customer.",  "loggedUser":
            1,  "reservationItems": [    {      "reservationItemId": 0,      "productId":
            666111,      "quantity": 5,      "unitPrice": 25,      "additionalUnitPrice":
            35,      "vatRate": 21,      "rowDiscount": 0,      "couponId": 0,      "productNote":
            "Note.",      "discountItems": [        {          "couponId": 483945938,          "discount":
            15        }      ]    }  ],  "totalPrice": 575,  "totalVAT": 75,  "totalDiscount":
            575,  "totalRounding": 0}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Reservation1
        x-testDescription: |-
          Creates new reservation in pharmacy (Farmis instance).
          Reservation object already exists in EShop DB and it is passed as a request body of this call.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /reservation-services/api/v1/reservation/{reservationId}:
    get:
      tags:
      - Reservation
      summary: Get Reservation
      description: Returns reservation object to the client. It retrieves the reservation object from EShop DB.
      operationId: ReservationServicesApiV1ReservationByReservationIdGet
      produces:
      - application/json
      parameters:
      - name: reservationId
        in: path
        description: Id of the reservation. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          examples:
            application/json:
              reservationId: 123
              dateTimeCreated: 2017-04-10T12:34:00.0000000Z
              dateTimeLastUpdated: 2017-04-10T12:34:00.0000000Z
              dateTimeReservationEnd: 2017-04-15T12:34:00.0000000Z
              status: Requested
              pharmacyId: 55
              customerId: 123
              customerLoyaltyCardId: 123
              customerFirstName: Jan
              customerLastName: Novák
              customerStreet: Dlouhá 21
              customerTown: Praha
              customerEmail: jan.novak@example.com
              customerPhone: 420777123456
              customerNote: Note from the customer.
              loggedUser: 1
              reservationItems:
              - reservationItemId: 0
                productId: 666111
                quantity: 5
                unitPrice: 25
                additionalUnitPrice: 35
                vatRate: 21
                rowDiscount: 0
                couponId: 0
                productNote: Note.
                discountItems:
                - couponId: 483945938
                  discount: 15
              totalPrice: 575
              totalVAT: 75
              totalDiscount: 575
              totalRounding: 0
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/ReservationWithCommonResponse'
      x-unitTests:
      - request:
          method: GET
          uri: /reservation-services/api/v1/reservation/123
          headers:
            Content-Type: application/json
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "reservationId": 123,  "dateTimeCreated": "2017-04-10T12:34:00.000Z",  "dateTimeLastUpdated":
            "2017-04-10T12:34:00.000Z",  "dateTimeReservationEnd": "2017-04-15T12:34:00.000Z",  "status":
            "Requested",  "pharmacyId": 55,  "customerId": 123,  "customerLoyaltyCardId":
            "123",  "customerFirstName": "Jan",  "customerLastName": "Novák",  "customerStreet":
            "Dlouhá 21",  "customerTown": "Praha",  "customerEmail": "jan.novak@example.com",  "customerPhone":
            "+420777123456",  "customerNote": "Note from the customer.",  "loggedUser":
            1,  "reservationItems": [    {      "reservationItemId": 0,      "productId":
            666111,      "quantity": 5,      "unitPrice": 25,      "additionalUnitPrice":
            35,      "vatRate": 21,      "rowDiscount": 0,      "couponId": 0,      "productNote":
            "Note.",      "discountItems": [        {          "couponId": 483945938,          "discount":
            15        }      ]    }  ],  "totalPrice": 575,  "totalVAT": 75,  "totalDiscount":
            575,  "totalRounding": 0,  "resultCode": true,  "errorCode": "OK",  "errorDescription":
            "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Reservation1
        x-testDescription: Returns reservation object to the client. It retrieves the reservation object from EShop DB.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /reservation-services/api/v1/reservation/{pharmacyId}/{reservationId}:
    delete:
      tags:
      - Reservation
      summary: Delete Reservation
      description: |-
        Deletes reservation in pharmacy.
        Calls respective EShop and Farmis instance to delete the reservation objects in pharmacy.
      operationId: ReservationServicesApiV1ReservationByPharmacyIdAndReservationIdDelete
      produces:
      - application/json
      parameters:
      - name: reservationId
        in: path
        description: Id of the reservation. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: pharmacyId
        in: path
        description: Id of the pharmacy. Foreign key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: DELETE
          uri: /reservation-services/api/v1/reservation/55/123
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Delete Reservation1
        x-testDescription: |-
          Deletes reservation in pharmacy.
          Calls respective EShop and Farmis instance to delete the reservation objects in pharmacy.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /reservation-services/api/v1/reservation/{reservationId}/status:
    put:
      tags:
      - Reservation
      summary: Update Reservation Status
      description: |-
        Updates Reservation Status.
        Reservation Status can be updated during reservation processing.
        - Reservation Status has the value `Requested` when the reservation was created in EShop and sent to respective Farmis instance via IPF.
        - Reservation Status can be updated by Farmis. In this case, the reservation status value can be updated to `PreparedForExpedition`, `Completed`, `Cancelled` or `InTrouble`.
        - Reservation Status update can be updated by call centre when the reservation has status `InTrouble`. In this case, the reservation status can be updated to `Requested` or `Cancelled`.
      operationId: ReservationServicesApiV1ReservationStatusByReservationIdPut
      produces:
      - application/json
      parameters:
      - name: reservationId
        in: path
        description: Id of the reservation. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/ReservationStatusRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /reservation-services/api/v1/reservation/123/status
          headers:
            Content-Type: application/json
          body: '{  "reservationStatus": "PreparedForExpedition",  "note": "OK",  "userName":
            "novak01"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Reservation Status1
        x-testDescription: |-
          Updates Reservation Status.
          Reservation Status can be updated during reservation processing.
          - Reservation Status has the value `Requested` when the reservation was created in EShop and sent to respective Farmis instance via IPF.
          - Reservation Status can be updated by Farmis. In this case, the reservation status value can be updated to `PreparedForExpedition`, `Completed`, `Cancelled` or `InTrouble`.
          - Reservation Status update can be updated by call centre when the reservation has status `InTrouble`. In this case, the reservation status can be updated to `Requested` or `Cancelled`.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /reservation-services/api/v1/reservation/{pharmacyId}/{reservationId}/date-time-reservation-end:
    put:
      tags:
      - Reservation
      summary: Update Reservation End Date
      description: |-
        Updates Reservation End date.
        Reservation End Date can be updated during reservation processing.
        - The update can be done by call centre if required by customer. In this case, new reservation date will be sent to EShop and respective Farmis instance.
      operationId: ReservationServicesApiV1ReservationDateTimeReservationEndByPharmacyIdAndReservationIdPut
      produces:
      - application/json
      parameters:
      - name: reservationId
        in: path
        description: Id of the reservation. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: pharmacyId
        in: path
        description: Id of the pharmacy. Foreign key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/ReservationDateTimeReservationEndRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /reservation-services/api/v1/reservation/55/123/date-time-reservation-end
          headers:
            Content-Type: application/json
          body: '{  "dateTimeReservationEnd": "2017-04-15T12:34:00.000Z",  "note":
            "OK",  "userName": "novak02"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Reservation End Date1
        x-testDescription: |-
          Updates Reservation End date.
          Reservation End Date can be updated during reservation processing.
          - The update can be done by call centre if required by customer. In this case, new reservation date will be sent to EShop and respective Farmis instance.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /reservation-services/api/v1/reservation/{reservationId}/history:
    get:
      tags:
      - Reservation
      summary: Get Reservation History
      description: |-
        Returns Reservation History.
        Calls EShop to retrieve reservation history items and return it to the client.
      operationId: ReservationServicesApiV1ReservationHistoryByReservationIdGet
      produces:
      - application/json
      parameters:
      - name: reservationId
        in: path
        description: Id of the reservation. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          examples:
            application/json:
              reservationHistoryItems:
              - reservationHistoryItemId: 0
                dateTime: 2017-04-10T12:34:00.0000000Z
                status: InTrouble
                userName: novak01
                userNote: Note from the operator.
          schema:
            $ref: '#/definitions/ReservationHistoryItems'
      x-unitTests:
      - request:
          method: GET
          uri: /reservation-services/api/v1/reservation/123/history
          headers:
            Content-Type: application/json
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "reservationHistoryItems": [    {      "reservationHistoryItemId":
            0,      "dateTime": "2017-04-10T12:34:00.000Z",      "status": "InTrouble",      "userName":
            "novak01",      "userNote": "Note from the operator."    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Reservation History1
        x-testDescription: |-
          Returns Reservation History.
          Calls EShop to retrieve reservation history items and return it to the client.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /stock-item-services/api/v1/stock-item-check/get-pharmacy-product-availability:
    post:
      tags:
      - StockItem
      summary: Get Availability of Specified Products in Selected Pharmacies
      description: |-
        Returns available quantities of specified product(s) in selected pharmacies.
        Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      operationId: StockItemServicesApiV1StockItemCheckGetPharmacyProductAvailabilityPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GetPharmacyProductAvailabilityRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              items:
              - pharmacyId: 55
                productId: 50024913
                availableQuantity: 6
              - pharmacyId: 55
                productId: 50096072
                availableQuantity: 5
              - pharmacyId: 66
                productId: 50024913
                availableQuantity: 6
              - pharmacyId: 66
                productId: 50096072
                availableQuantity: 5
          schema:
            $ref: '#/definitions/GetPharmacyProductAvailabilityResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /stock-item-services/api/v1/stock-item-check/get-pharmacy-product-availability
          headers:
            Content-Type: application/json
          body: '{    "pharmacyIds": [        55, 66        ],    "productIds": [        50024913,
            50096072        ]}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "items": [        {            "pharmacyId": 55,            "productId":
            50024913,            "availableQuantity": 6        },        {            "pharmacyId":
            55,            "productId": 50096072,            "availableQuantity":
            5        },        {            "pharmacyId": 66,            "productId":
            50024913,            "availableQuantity": 6        },        {            "pharmacyId":
            66,            "productId": 50096072,            "availableQuantity":
            5        }    ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Availability of Specified Products in Selected Pharmacies1
        x-testDescription: |-
          Returns available quantities of specified product(s) in selected pharmacies.
          Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /stock-item-services/api/v1/stock-item-check/get-pharmacy-product-detail:
    post:
      tags:
      - StockItem
      summary: Get Details of Specified Products in Selected Pharmacies
      description: Returns stock items of specified product(s) in selected pharmacies.
      operationId: StockItemServicesApiV1StockItemCheckGetPharmacyProductDetailPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GetPharmacyProductDetailRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              items:
              - pharmacyId: 55
                productId: 50024913
                totalQuantity: 60
                reservedQuantity: 50
                frozenQuantity: 4
                availableQuantity: 6
                providesReservation: true
                isUpToDate: false
              - pharmacyId: 55
                productId: 50096072
                totalQuantity: 50
                reservedQuantity: 40
                frozenQuantity: 5
                availableQuantity: 5
                providesReservation: true
                isUpToDate: false
              - pharmacyId: 66
                productId: 50024913
                totalQuantity: 60
                reservedQuantity: 50
                frozenQuantity: 4
                availableQuantity: 6
                providesReservation: false
                isUpToDate: true
              - pharmacyId: 66
                productId: 50096072
                totalQuantity: 50
                reservedQuantity: 40
                frozenQuantity: 5
                availableQuantity: 5
                providesReservation: false
                isUpToDate: true
          schema:
            $ref: '#/definitions/GetPharmacyProductDetailResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /stock-item-services/api/v1/stock-item-check/get-pharmacy-product-detail
          headers:
            Content-Type: application/json
          body: '{    "pharmacyIds": [        55, 66        ],    "productIds": [        50024913,
            50096072        ]}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "items": [        {            "pharmacyId": 55,            "productId":
            50024913,            "totalQuantity": 60,            "reservedQuantity":
            50,            "frozenQuantity": 4,            "availableQuantity": 6,            "providesReservation":
            true,            "isUpToDate": false        },        {            "pharmacyId":
            55,            "productId": 50096072,            "totalQuantity": 50,            "reservedQuantity":
            40,            "frozenQuantity": 5,            "availableQuantity": 5,            "providesReservation":
            true,            "isUpToDate": false        },        {            "pharmacyId":
            66,            "productId": 50024913,            "totalQuantity": 60,            "reservedQuantity":
            50,            "frozenQuantity": 4,            "availableQuantity": 6,            "providesReservation":
            false,            "isUpToDate": true        },        {            "pharmacyId":
            66,            "productId": 50096072,            "totalQuantity": 50,            "reservedQuantity":
            40,            "frozenQuantity": 5,            "availableQuantity": 5,            "providesReservation":
            false,            "isUpToDate": true        }    ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Details of Specified Products in Selected Pharmacies1
        x-testDescription: Returns stock items of specified product(s) in selected pharmacies.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /stock-item-services/api/v1/stock-item-check/get-quantity-in-pharmacy:
    post:
      tags:
      - StockItem
      summary: Get Quantity in Selected Pharmacy
      description: |-
        Returns available quantity of stock item(s) (list) in selected pharmacy.
        Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      operationId: StockItemServicesApiV1StockItemCheckGetQuantityInPharmacyPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/StockItemCheckPharmacyRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              pharmacyId: 55
              items:
              - productId: 50024913
                availableQuantity: 6
              - productId: 50096072
                availableQuantity: 5
          schema:
            $ref: '#/definitions/StockItemCheckPharmacyResponse'
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /stock-item-services/api/v1/stock-item-check/get-pharmacy-count:
    post:
      tags:
      - StockItem
      summary: Get Stock Items Pharmacy Count
      description: Returns pharmacy count where selected product is available.
      operationId: StockItemServicesApiV1StockItemCheckGetPharmacyCountPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/StockItemCheckPharmacyCountRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              pharmacyCount: 321
          schema:
            $ref: '#/definitions/StockItemCheckPharmacyCountResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /stock-item-services/api/v1/stock-item-check/get-pharmacy-count
          headers:
            Content-Type: application/json
          body: '{    "productId": 50024913}    '
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "pharmacyCount": 321}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Stock Items Pharmacy Count1
        x-testDescription: Returns pharmacy count where selected product is available.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /stock-item-services/api/v1/stock-item-check/get-quantity-in-pharmacy-list:
    post:
      tags:
      - StockItem
      summary: Get Stock Items in Pharmacy List
      description: |-
        Returns available quantity of stock item in selected pharmacies (list).
        Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      operationId: StockItemServicesApiV1StockItemCheckGetQuantityInPharmacyListPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/StockItemCheckPharmacyListRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              items:
              - pharmacyId: 56
                productId: 50024913
                availableQuantity: 6
              - pharmacyId: 57
                productId: 50024913
                availableQuantity: 5
          schema:
            $ref: '#/definitions/StockItemCheckPharmacyListResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /stock-item-services/api/v1/stock-item-check/get-quantity-in-pharmacy-list
          headers:
            Content-Type: application/json
          body: '{    "pharmacyIds": [        56, 57    ],    "productId": 50024913}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "items": [        {            "pharmacyId": 56,            "productId":
            50024913,            "availableQuantity": 6        },        {            "pharmacyId":
            57,            "productId": 50024913,            "availableQuantity":
            5        }    ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Stock Items in Pharmacy List1
        x-testDescription: |-
          Returns available quantity of stock item in selected pharmacies (list).
          Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /pharmacy-services/api/v1/pharmacy/{pharmacyId}:
    get:
      tags:
      - Pharmacy
      summary: Get Pharmacy
      description: Returns pharmacy data.
      operationId: PharmacyServicesApiV1PharmacyByPharmacyIdGet
      produces:
      - application/json
      parameters:
      - name: pharmacyId
        in: path
        description: Id of the pharmacy. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          examples:
            application/json:
              pharmacyId: 55
              pharmacyName: Lékárna Na Poříčí
              reservationPackageService: true
              reservationPackageExpirationHours: 72
              endpointId: 32
          schema:
            $ref: '#/definitions/Pharmacy'
      x-unitTests:
      - request:
          method: GET
          uri: /pharmacy-services/api/v1/pharmacy/32
          headers:
            Content-Type: application/json
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "pharmacyId": 55,  "pharmacyName": "Lékárna Na Poříčí",  "reservationPackageService":
            true,  "reservationPackageExpirationHours": 72,  "endpointId": 32}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Pharmacy1
        x-testDescription: Returns pharmacy data.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      tags:
      - Pharmacy
      summary: Create Pharmacy
      description: Creates new pharmacy.
      operationId: PharmacyServicesApiV1PharmacyByPharmacyIdPut
      produces:
      - application/json
      parameters:
      - name: pharmacyId
        in: path
        description: Id of the pharmacy. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/Pharmacy'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /pharmacy-services/api/v1/pharmacy/32
          headers:
            Content-Type: application/json
          body: '{  "pharmacyId": 55,  "pharmacyName": "Lékárna Na Poříčí",  "reservationPackageService":
            true,  "reservationPackageExpirationHours": 72,  "endpointId": 32}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Pharmacy1
        x-testDescription: Creates new pharmacy.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /stock-item-services/api/v1/frozen-quantity/{pharmacyId}/{productId}:
    get:
      tags:
      - Frozen Quantity
      summary: Get Frozen Quantity
      description: Returns frozen quantity data.
      operationId: StockItemServicesApiV1FrozenQuantityByPharmacyIdAndProductIdGet
      produces:
      - application/json
      parameters:
      - name: pharmacyId
        in: path
        description: Id of the pharmacy. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: productId
        in: path
        description: Id of the product. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          examples:
            application/json:
              pharmacyId: 55
              productId: 666111
              frozenQuantity: 6
          schema:
            $ref: '#/definitions/FrozenQuantityItem'
      x-unitTests:
      - request:
          method: GET
          uri: /stock-item-services/api/v1/frozen-quantity/32/32
          headers:
            Content-Type: application/json
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "pharmacyId": 55,  "productId": 666111,  "frozenQuantity": 6}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Frozen Quantity1
        x-testDescription: Returns frozen quantity data.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      tags:
      - Frozen Quantity
      summary: Put Frozen Quantity
      description: Creates or updates frozen quantity data.
      operationId: StockItemServicesApiV1FrozenQuantityByPharmacyIdAndProductIdPut
      produces:
      - application/json
      parameters:
      - name: pharmacyId
        in: path
        description: Id of the pharmacy. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: productId
        in: path
        description: Id of the product. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/FrozenQuantityItem'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /stock-item-services/api/v1/frozen-quantity/32/32
          headers:
            Content-Type: application/json
          body: '{  "pharmacyId": 55,  "productId": 666111,  "frozenQuantity": 6}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Put Frozen Quantity1
        x-testDescription: Creates or updates frozen quantity data.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /coupon-services/api/v1/coupon:
    put:
      tags:
      - Coupon
      summary: Create Coupon Compensation
      description: Creates a new coupon for compensation.
      operationId: CouponServicesApiV1CouponPut
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/CouponCompensation'
      responses:
        200:
          description: ""
          examples:
            application/json:
              couponId: 321
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CouponResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /coupon-services/api/v1/coupon
          headers:
            Content-Type: application/json
          body: '{  "name": "Sleva20",  "type": "K",  "status": "A",  "compensation":
            20,  "validFrom": "2017-04-15T12:34:00.000Z",  "validTo": "2017-04-15T18:55:00.000Z"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "couponId": 321,  "resultCode": true,  "errorCode": "OK",  "errorDescription":
            "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Coupon Compensation1
        x-testDescription: Creates a new coupon for compensation.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /coupon-services/api/v1/coupon-discount:
    put:
      tags:
      - Coupon
      summary: Create Coupon Discount
      description: Creates a new coupon for discount.
      operationId: CouponServicesApiV1CouponDiscountPut
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/CouponDiscount'
      responses:
        200:
          description: ""
          examples:
            application/json:
              couponId: 321
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CouponResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /coupon-services/api/v1/coupon-discount
          headers:
            Content-Type: application/json
          body: '{  "name": "Sleva20",  "type": "N",  "status": "A",  "validFrom":
            "2017-04-15T12:34:00.000Z",  "validTo": "2017-04-15T18:55:00.000Z"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "couponId": 321,  "resultCode": true,  "errorCode": "OK",  "errorDescription":
            "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Coupon Discount1
        x-testDescription: Creates a new coupon for discount.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /coupon-services/api/v1/coupon/{couponId}:
    put:
      tags:
      - Coupon
      summary: Update Coupon
      description: Updates the coupon data.
      operationId: CouponServicesApiV1CouponByCouponIdPut
      produces:
      - application/json
      parameters:
      - name: couponId
        in: path
        description: Id of the updated coupon.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/CouponCompensation'
      responses:
        200:
          description: ""
          examples:
            application/json:
              couponId: 321
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CouponResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /coupon-services/api/v1/coupon/321
          headers:
            Content-Type: application/json
          body: '{  "name": "Sleva20",  "type": "K",  "status": "A",  "compensation":
            20,  "validFrom": "2017-04-15T12:34:00.000Z",  "validTo": "2017-04-15T18:55:00.000Z"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "couponId": 321,  "resultCode": true,  "errorCode": "OK",  "errorDescription":
            "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Coupon1
        x-testDescription: Updates the coupon data.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /service-now/api/v1/ticket/create-top:
    post:
      tags:
      - SNoW APIs
      summary: Create Top Ticket
      description: |-
        Creates a new *top ticket* in Service Now. The request contains:
        * Optional *external ticket identifier* - an identifier of an object in calling system, that will be associated with the new Service Now ticket.
        * Required *external application name* - an identifier of the calling system.
        * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
        in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
        re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
        related to this ticket should use the same transaction identifier.
        * Required *catalog item* related to GDPR. There is a predefined catalog in the Service Now to choose from. For all countries there are three types of catalog items:
            * Request for Information
            * Request to Forget/Delete
            * Other
        * Required *link* - URL of the appropriate workflow in the GDPR Bus.
        * Required *description* - Textual description of the top ticket.
      operationId: ServiceNowApiV1TicketCreateTopPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/CreateTopTicketRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              ticketId: 22a55a570fa04c88b8f9b4cbb78fb760
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CreateTicketResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /service-now/api/v1/ticket/create-top
          headers:
            Content-Type: application/json
          body: '{  "externalTicketId": "123456789",  "externalApplication": "GDPR",  "transactionId":
            "44e70a570fa04c99b8f9b4cbb78fb067",  "catalogItem": "11a70a570fa04c99b8f9b4cbb78fb067",  "link":
            "http://hostname/path/to/resource",  "description": "Description of the
            business case."}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "ticketId": "22a55a570fa04c88b8f9b4cbb78fb760",  "resultCode":
            true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Top Ticket1
        x-testDescription: |-
          Creates a new *top ticket* in Service Now. The request contains:
          * Optional *external ticket identifier* - an identifier of an object in calling system, that will be associated with the new Service Now ticket.
          * Required *external application name* - an identifier of the calling system.
          * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
          in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
          re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
          related to this ticket should use the same transaction identifier.
          * Required *catalog item* related to GDPR. There is a predefined catalog in the Service Now to choose from. For all countries there are three types of catalog items:
              * Request for Information
              * Request to Forget/Delete
              * Other
          * Required *link* - URL of the appropriate workflow in the GDPR Bus.
          * Required *description* - Textual description of the top ticket.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /service-now/api/v1/ticket/create-task:
    post:
      tags:
      - SNoW APIs
      summary: Create Task Ticket
      description: |-
        Creates a new *task ticket* in Service Now.
        * Optional *external ticket identifier* - an identifier of an object in calling system, that will be associated with the new Service Now ticket.
        * Required *external application name* - an identifier of the calling system.
        * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
        in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
        re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
        related to this ticket should use the same transaction identifier.
        * Required *request item* - identifier of the appropriate top ticket, which will the new task ticket be associated to.
        * Required *assignment group* - identifier of an assignment group in Service Now, chosen from pre-defined catalog specified by the Service Now supplier.
        * Required *due date and time* - Due date and time formatted according ISO-8601. Explicit time zone is supposed.
        * Required *short description* - Short textual description of the task ticket.
        * Required *description* - Textual description of the task ticket.
      operationId: ServiceNowApiV1TicketCreateTaskPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/CreateTaskTicketRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              ticketId: 22a55a570fa04c88b8f9b4cbb78fb760
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CreateTicketResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /service-now/api/v1/ticket/create-task
          headers:
            Content-Type: application/json
          body: '{  "externalTicketId": "123456789",  "externalApplication": "GDPR",  "transactionId":
            "44e70a570fa04c99b8f9b4cbb78fb067",  "requestItem": "22f70a570fa04c99b8f9b4cbb78fb067",  "assignmentGroup":
            "33e70a570fa04c88b8f9b4cbb78fb760",  "dueDateTime": "2018-06-15T18:55:00.000Z",  "shortDescription":
            "Short description of the task.",  "description": "Description of the
            task."}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "ticketId": "22a55a570fa04c88b8f9b4cbb78fb760",  "resultCode":
            true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Task Ticket1
        x-testDescription: |-
          Creates a new *task ticket* in Service Now.
          * Optional *external ticket identifier* - an identifier of an object in calling system, that will be associated with the new Service Now ticket.
          * Required *external application name* - an identifier of the calling system.
          * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
          in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
          re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
          related to this ticket should use the same transaction identifier.
          * Required *request item* - identifier of the appropriate top ticket, which will the new task ticket be associated to.
          * Required *assignment group* - identifier of an assignment group in Service Now, chosen from pre-defined catalog specified by the Service Now supplier.
          * Required *due date and time* - Due date and time formatted according ISO-8601. Explicit time zone is supposed.
          * Required *short description* - Short textual description of the task ticket.
          * Required *description* - Textual description of the task ticket.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /service-now/api/v1/ticket/add-comment:
    put:
      tags:
      - SNoW APIs
      summary: Add Ticket Comment
      description: |-
        Adds new comments to the ticket in Service Now.
        * Required *ticket type* - the type of the ticket. Is required even if the ticket should be uniquelly identified by its ticket identifier. It is *so called* standard in Service Now.
        * Required *ticket identifier* - the ticket identifier.
        * Optional *external ticket identifier* - an identifier of an object in calling system. Doesn't make sense since it might be assigned by Create Ticket operation. Obviously *standard* of Service Now as well.
        * Required *external application name* - an identifier of the calling system.
        * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
        in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
        re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
        related to this ticket should use the same transaction identifier.
        * Optional *work notes* - Textual work notes.
        * Required *comments* - Required textual comments.
      operationId: ServiceNowApiV1TicketAddCommentPut
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/AddCommentRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /service-now/api/v1/ticket/add-comment
          headers:
            Content-Type: application/json
          body: '{  "ticketType": "sc_task",  "ticketId": "22a55a570fa04c88b8f9b4cbb78fb760",  "externalTicketId":
            "123456789",  "externalApplication": "GDPR",  "transactionId": "44e70a570fa04c99b8f9b4cbb78fb067",  "workNotes":
            "Textual work notes",  "comments": "Textual comments"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Add Ticket Comment1
        x-testDescription: |-
          Adds new comments to the ticket in Service Now.
          * Required *ticket type* - the type of the ticket. Is required even if the ticket should be uniquelly identified by its ticket identifier. It is *so called* standard in Service Now.
          * Required *ticket identifier* - the ticket identifier.
          * Optional *external ticket identifier* - an identifier of an object in calling system. Doesn't make sense since it might be assigned by Create Ticket operation. Obviously *standard* of Service Now as well.
          * Required *external application name* - an identifier of the calling system.
          * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
          in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
          re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
          related to this ticket should use the same transaction identifier.
          * Optional *work notes* - Textual work notes.
          * Required *comments* - Required textual comments.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /service-now/api/v1/ticket/update-top-ticket-status:
    put:
      tags:
      - SNoW APIs
      summary: Update Top Ticket status
      description: |-
        Changes the status of the specified **top** ticket in Service Now.
        * Required *ticket type* - the type of the ticket. Is required even if the ticket should be uniquelly identified by its ticket identifier. It is *so called* standard in Service Now. The only valid value of this attribute is `sc_req_item`.
        * Required *ticket identifier* - the ticket identifier.
        * Optional *external ticket identifier* - an identifier of an object in calling system. Doesn't make sense since it might be assigned by Create Ticket operation. Obviously *standard* of Service Now as well.
        * Required *external application name* - an identifier of the calling system.
        * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
        in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
        re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
        related to this ticket should use the same transaction identifier.
        * Required *ticket status* - new status to be changed to. As far as we know, supported statuses are `resolved`, `waiting` and `in_progress`. IPF service forwards the
        new status to Service Now as is, i. e. makes no validation agaist the list of statuses mentioned formerly. Service Now may accept another statuses as well.
      operationId: ServiceNowApiV1TicketUpdateTopTicketStatusPut
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/UpdateTicketStatusRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /service-now/api/v1/ticket/update-top-ticket-status
          headers:
            Content-Type: application/json
          body: '{  "ticketType": "sc_task",  "ticketId": "22a55a570fa04c88b8f9b4cbb78fb760",  "externalTicketId":
            "123456789",  "externalApplication": "GDPR",  "transactionId": "44e70a570fa04c99b8f9b4cbb78fb067",  "status":
            "finished"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Top Ticket status1
        x-testDescription: |-
          Changes the status of the specified **top** ticket in Service Now.
          * Required *ticket type* - the type of the ticket. Is required even if the ticket should be uniquelly identified by its ticket identifier. It is *so called* standard in Service Now. The only valid value of this attribute is `sc_req_item`.
          * Required *ticket identifier* - the ticket identifier.
          * Optional *external ticket identifier* - an identifier of an object in calling system. Doesn't make sense since it might be assigned by Create Ticket operation. Obviously *standard* of Service Now as well.
          * Required *external application name* - an identifier of the calling system.
          * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
          in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
          re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
          related to this ticket should use the same transaction identifier.
          * Required *ticket status* - new status to be changed to. As far as we know, supported statuses are `resolved`, `waiting` and `in_progress`. IPF service forwards the
          new status to Service Now as is, i. e. makes no validation agaist the list of statuses mentioned formerly. Service Now may accept another statuses as well.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /service-now/api/v1/ticket/update-ticket-status:
    put:
      tags:
      - SNoW APIs
      summary: Update Ticket status
      description: |-
        Changes the status of the specified **task** ticket in Service Now.
        * Required *ticket type* - the type of the ticket. Is required even if the ticket should be uniquelly identified by its ticket identifier. It is *so called* standard in Service Now. The only valid value of this attribute is `sc_task`.
        * Required *ticket identifier* - the ticket identifier.
        * Optional *external ticket identifier* - an identifier of an object in calling system. Doesn't make sense since it might be assigned by Create Ticket operation. Obviously *standard* of Service Now as well.
        * Required *external application name* - an identifier of the calling system.
        * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
        in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
        re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
        related to this ticket should use the same transaction identifier.
        * Required *ticket status* - new status to be changed to. As far as we know, supported statuses are `3` and `4`. The code `3` is for *closed complete* and
        the code `4` is for *closed incomplete*. IPF service forwards the new status to Service Now as is, i. e. makes no validation against the list of statuses
        mentioned formerly. Service Now may accept another statuses as well.
      operationId: ServiceNowApiV1TicketUpdateTicketStatusPut
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/UpdateTicketStatusRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /service-now/api/v1/ticket/update-ticket-status
          headers:
            Content-Type: application/json
          body: '{  "ticketType": "sc_task",  "ticketId": "22a55a570fa04c88b8f9b4cbb78fb760",  "externalTicketId":
            "123456789",  "externalApplication": "GDPR",  "transactionId": "44e70a570fa04c99b8f9b4cbb78fb067",  "status":
            "finished"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Ticket status1
        x-testDescription: |-
          Changes the status of the specified **task** ticket in Service Now.
          * Required *ticket type* - the type of the ticket. Is required even if the ticket should be uniquelly identified by its ticket identifier. It is *so called* standard in Service Now. The only valid value of this attribute is `sc_task`.
          * Required *ticket identifier* - the ticket identifier.
          * Optional *external ticket identifier* - an identifier of an object in calling system. Doesn't make sense since it might be assigned by Create Ticket operation. Obviously *standard* of Service Now as well.
          * Required *external application name* - an identifier of the calling system.
          * Required *transaction identifier* - unique transaction identifier. The transaction always starts with create request and its identifier is used
          in all following update requests. Top ticket and task tickets have their own transaction identifiers. The transaction identifier used during the ticket creation is
          re-used for each update of the ticket. Note: transaction identifier is bound to the ticket lifecycle so further interactions by the calling system
          related to this ticket should use the same transaction identifier.
          * Required *ticket status* - new status to be changed to. As far as we know, supported statuses are `3` and `4`. The code `3` is for *closed complete* and
          the code `4` is for *closed incomplete*. IPF service forwards the new status to Service Now as is, i. e. makes no validation against the list of statuses
          mentioned formerly. Service Now may accept another statuses as well.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/workflow:
    post:
      tags:
      - GDPR-task
      summary: Start
      description: "Start a new GDPRBUS workflow based on provided data (input form)\n\
        |Direction      |System           |Owner      |                          \
        \          \n|:--------------|-----------------|-----------|\n|Provided by:\
        \   |IPF              | Dr. Max   |  \n|Consumed by:   |Backend systems  |\
        \ Dr. Max   |"
      operationId: GDPRServicesApiV1WorkflowPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          type: object
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              url: https://gdprbus/abc-def
          schema:
            $ref: '#/definitions/GDPRStartWorkflowResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /GDPR-services/api/v1/workflow
          headers:
            Content-Type: application/json
          body: '{}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "url":
            "https://gdprbus/abc-def"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Start1
        x-testDescription: "Start a new GDPRBUS workflow based on provided data (input\
          \ form)\n|Direction      |System           |Owner      |               \
          \                     \n|:--------------|-----------------|-----------|\n\
          |Provided by:   |IPF              | Dr. Max   |  \n|Consumed by:   |Backend\
          \ systems  | Dr. Max   |"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/task-status/:
    put:
      tags:
      - GDPR-task
      summary: TaskStatus
      description: "Updates task status of the specified task. Back-end systems are\
        \ obliged to inform the GDPR Bus about the asynchronous task processing progress.\n\
        This service must be called for each task separately.\n|Direction      |System\
        \           |Owner      |                                    \n|:--------------|-----------------|-----------|\n\
        |Provided by:   |IPF              | Dr. Max   |  \n|Consumed by:   |Backend\
        \ systems  | Dr. Max   |"
      operationId: GDPRServicesApiV1TaskStatusPut
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRTaskStatusRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/GDPRCommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /GDPR-services/api/v1/task-status/
          headers:
            Content-Type: application/json
          body: '{  "taskId": "44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",  "systemRegistrationId":
            "0046da06-bbf7-47a8-b6a6-6df962db1a75",  "timestamp": "2017-04-10T12:34:00.000Z",  "taskStatus":
            "finished"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: TaskStatus1
        x-testDescription: "Updates task status of the specified task. Back-end systems\
          \ are obliged to inform the GDPR Bus about the asynchronous task processing\
          \ progress.\nThis service must be called for each task separately.\n|Direction\
          \      |System           |Owner      |                                 \
          \   \n|:--------------|-----------------|-----------|\n|Provided by:   |IPF\
          \              | Dr. Max   |  \n|Consumed by:   |Backend systems  | Dr.\
          \ Max   |"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/getappdata/{appId}:
    get:
      tags:
      - GDPR-task
      summary: getAppData scrambled
      description: |-
        Get information about application in GDPR Bus, data returned is partialy scrabmled for security reason
        |               |System     |Owner        |
        |:--------------|-----------|-------------|
        |Provided by:   |IPF        | Dr. Max     |
        |Consumed by:   |BackEnds   | Dr. Max     |
      operationId: GDPRServicesApiV1GetappdataByAppIdGet
      produces:
      - application/json
      parameters:
      - name: appId
        in: path
        description: Id of the application.
        required: true
        type: string
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              id: 123
              subject: Ja* St**
              pId: 12*
              mustVerify: true
              verified: false
              startDate: 2018-04-10T12:34:00.0000000Z
              endDate: 2018-04-10T12:34:00.0000000Z
              gpmId: 03b6ee55-4b9f-4a0b-8310-8b824a952c33
              country: CZE
              snowId: snowid
              type: type
          schema:
            $ref: '#/definitions/GDPRApplication'
      x-unitTests:
      - request:
          method: GET
          uri: /GDPR-services/api/v1/getappdata/123
          headers:
            Content-Type: application/json
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "id":
            "123",  "subject": "Ja* St**",  "pId": "12*",  "mustVerify": true,  "verified":
            false,  "startDate": "2018-04-10T12:34:00.000Z",  "endDate": "2018-04-10T12:34:00.000Z",  "gpmId":
            "03b6ee55-4b9f-4a0b-8310-8b824a952c33",  "country": "CZE",  "snowId":
            "snowid",  "type": "type"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: getAppData scrambled1
        x-testDescription: |-
          Get information about application in GDPR Bus, data returned is partialy scrabmled for security reason
          |               |System     |Owner        |
          |:--------------|-----------|-------------|
          |Provided by:   |IPF        | Dr. Max     |
          |Consumed by:   |BackEnds   | Dr. Max     |
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1.1/getappdata/{appId}:
    get:
      tags:
      - GDPR-task
      summary: getAppData
      description: |-
        Get information about application in GDPR Bus
        |               |System     |Owner        |
        |:--------------|-----------|-------------|
        |Provided by:   |IPF        | Dr. Max     |
        |Consumed by:   |BackEnds   | Dr. Max     |
      operationId: GDPRServicesApiV11GetappdataByAppIdGet
      produces:
      - application/json
      parameters:
      - name: appId
        in: path
        description: Id of the application.
        required: true
        type: string
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              id: 123
              subject: Ja* St**
              pId: 12*
              mustVerify: true
              verified: false
              startDate: 2018-04-10T12:34:00.0000000Z
              endDate: 2018-04-10T12:34:00.0000000Z
              gpmId: 03b6ee55-4b9f-4a0b-8310-8b824a952c33
              country: CZE
              snowId: snowid
              type: type
          schema:
            $ref: '#/definitions/GDPRApplication'
      x-unitTests:
      - request:
          method: GET
          uri: /GDPR-services/api/v1.1/getappdata/123
          headers:
            Content-Type: application/json
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "id":
            "123",  "subject": "Ja* St**",  "pId": "12*",  "mustVerify": true,  "verified":
            false,  "startDate": "2018-04-10T12:34:00.000Z",  "endDate": "2018-04-10T12:34:00.000Z",  "gpmId":
            "03b6ee55-4b9f-4a0b-8310-8b824a952c33",  "country": "CZE",  "snowId":
            "snowid",  "type": "type"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: getAppData1
        x-testDescription: |-
          Get information about application in GDPR Bus
          |               |System     |Owner        |
          |:--------------|-----------|-------------|
          |Provided by:   |IPF        | Dr. Max     |
          |Consumed by:   |BackEnds   | Dr. Max     |
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/setappverified:
    post:
      tags:
      - GDPR-task
      summary: setAppVerified
      description: |-
        Set application status to verfified value on GDPR Bus
        |               |System     |Owner        |
        |:--------------|-----------|-------------|
        |Provided by:   |IPF        | Dr. Max     |
        |Consumed by:   |BackEnds   | Dr. Max     |
      operationId: GDPRServicesApiV1SetappverifiedPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/SetappverifiedRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/GDPRCommonResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /GDPR-services/api/v1/setappverified
          headers:
            Content-Type: application/json
          body: '{  "appId": "123"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: setAppVerified1
        x-testDescription: |-
          Set application status to verfified value on GDPR Bus
          |               |System     |Owner        |
          |:--------------|-----------|-------------|
          |Provided by:   |IPF        | Dr. Max     |
          |Consumed by:   |BackEnds   | Dr. Max     |
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/find-person/:
    post:
      tags:
      - GDPR-task
      summary: FindPerson
      description: "Starts *Find Person* task distribution to the back-end system.\n\
        Among standard attributes (see the [*Asynchronous Processing Model* section](asynchronous-processing-model)),\
        \ the *Find Person* task\nrequest specifies the search criteria - an array\
        \ of following pairs:\n+ identificationArea: Type of data to be used by *Find\
        \ Person* task.\n+ identificationValue: The value to be used by *Find Person*\
        \ task.\n The *FindPerson* operation synchronously returns the array of systems\
        \ to process the task.\n|               |System      |Owner        |     \
        \                               \n|:--------------|------------|-------------|\n\
        |Provided by:   |IPF         | Dr.Max      |\n|Consumed by:   |GDPR BusApp\
        \ | Dr. Max     |"
      operationId: GDPRServicesApiV1FindPersonPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRFindPersonData'
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/GDPRFindPersonResponse'
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/find-obsolete-person/:
    post:
      tags:
      - GDPR-task
      summary: FindObsoletePerson
      description: "Invoke *Find Obsolete Person* task in back-end system trough IPF.\
        \ The task searches for persons against specified business criteria.\nIn this\
        \ particular case is a time in to past.\nThis API doesn't specify business\
        \ rules and algorithms to be peformed in back-end systems while seeking for\
        \ a person.\nIt just supplies the data to be used by the asynchronous task.\n\
        For ansver to thist task should be used ** Provide Personal Data ** as a standard\
        \ way how to provide person identification\nThe *FindObsoletePerson* operation\
        \ synchronously returns the standard attributes (see the [*General Definitions*\
        \ section](general-definitions)).\n|               |System      |Owner   \
        \     |                                    \n|:--------------|------------|-------------|\n\
        |Provided by:   |IPF         | Dr.Max      |\n|Consumed by:   |GDPR BusApp\
        \ | Dr. Max     |"
      operationId: GDPRServicesApiV1FindObsoletePersonPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRFindObsoletePersonDataRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/GDPRCommonResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /GDPR-services/api/v1/find-obsolete-person/
          headers:
            Content-Type: application/json
          body: '{  "taskId": "44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",  "timestamp":
            "2017-04-10T12:34:00.000Z",  "country": "CZE",  "manual": {    "topTicketId":
            "69b667a5dbf85300d5abb14ffe9619c1",    "taskURL": "http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",    "transactionId":
            "7dbb84b34f013200be1430318110c7e8"  }}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: FindObsoletePerson1
        x-testDescription: "Invoke *Find Obsolete Person* task in back-end system\
          \ trough IPF. The task searches for persons against specified business criteria.\n\
          In this particular case is a time in to past.\nThis API doesn't specify\
          \ business rules and algorithms to be peformed in back-end systems while\
          \ seeking for a person.\nIt just supplies the data to be used by the asynchronous\
          \ task.\nFor ansver to thist task should be used ** Provide Personal Data\
          \ ** as a standard way how to provide person identification\nThe *FindObsoletePerson*\
          \ operation synchronously returns the standard attributes (see the [*General\
          \ Definitions* section](general-definitions)).\n|               |System\
          \      |Owner        |                                    \n|:--------------|------------|-------------|\n\
          |Provided by:   |IPF         | Dr.Max      |\n|Consumed by:   |GDPR BusApp\
          \ | Dr. Max     |"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/found-person/:
    post:
      tags:
      - GDPR-task
      summary: FoundPerson
      description: "Returns results of *Find Person* task. This service **MUST** be\
        \ called separately for each person found during the task execution.\nAmong\
        \ standard attributes (see the [*Asynchronous Processing Model* section](asynchronous-processing-model)),\
        \ the *Found Person* request\ncontains identification data of the found person:\n\
        + identificationData\n    + identificationArea: Type of data used when the\
        \ back-end system has found the person.\n    + identificationRecordIdValue:\
        \ Person identifier of the found person.\n|               |System        \
        \   |Owner      |                                    \n|:--------------|-----------------|-----------|\n\
        |Provided by:   |IPF              | Dr. Max   |  \n|Consumed by:   |Backend\
        \ systems  | Dr. Max   |"
      operationId: GDPRServicesApiV1FoundPersonPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRFoundPersons'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/GDPRCommonResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /GDPR-services/api/v1/found-person/
          headers:
            Content-Type: application/json
          body: '{        "taskId": "44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",    "systemRegistrationId":
            "0046da06-bbf7-47a8-b6a6-6df962db1a75",    "timestamp": "2017-04-10T12:34:00.000Z",    "businessTimestamp":
            "2017-04-10T12:34:00.000Z",    "identificationRecordIdValue" : "0046da06",    "identificationData":     [        {            "identificationArea":
            "surname",            "identificationValue": "Novák"        },        {            "identificationArea":
            "name",            "identificationValue": "Petr"        },        {            "identificationArea":
            "title",            "identificationValue": "Ing."        },        {        "identificationArea":
            "email",        "identificationValue": "petr.novak@mail.cz"        },        {            "identificationArea":
            "phonePrefix",            "identificationValue": "420"        },        {            "identificationArea":
            "phoneNumber",            "identificationValue": "123123123"        },        {            "identificationArea":
            "mobilePrefix",            "identificationValue": "420"        },        {            "identificationArea":
            "mobileNumber",            "identificationValue": "567567567"        },        {            "identificationArea":
            "town",            "identificationValue": "Prague"        },        {            "identificationArea":
            "district",            "identificationValue": "Pankrác"        },        {            "identificationArea":
            "streetAddress",            "identificationValue": "Hvězdova"        },        {            "identificationArea":
            "houseNumber",            "identificationValue": "1234/56"        },        {            "identificationArea":
            "zipCode",            "identificationValue": "141 00"        },        {            "identificationArea":
            "state",            "identificationValue": "CZE"        },        {            "identificationArea":
            "pin",            "identificationValue": "420511/123"        },        {            "identificationArea":
            "hin",            "identificationValue": "123456"        },        {            "identificationArea":
            "birthDate",            "identificationValue": "1942-05-11"        },        {            "identificationArea":
            "birthPlace",            "identificationValue": "Wiena"        },        {            "identificationArea":
            "clientCardNum",            "identificationValue": "9876-09876"        }    ]}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: FoundPerson1
        x-testDescription: "Returns results of *Find Person* task. This service **MUST**\
          \ be called separately for each person found during the task execution.\n\
          Among standard attributes (see the [*Asynchronous Processing Model* section](asynchronous-processing-model)),\
          \ the *Found Person* request\ncontains identification data of the found\
          \ person:\n+ identificationData\n    + identificationArea: Type of data\
          \ used when the back-end system has found the person.\n    + identificationRecordIdValue:\
          \ Person identifier of the found person.\n|               |System      \
          \     |Owner      |                                    \n|:--------------|-----------------|-----------|\n\
          |Provided by:   |IPF              | Dr. Max   |  \n|Consumed by:   |Backend\
          \ systems  | Dr. Max   |"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/provide-person-data/:
    post:
      tags:
      - GDPR-task
      summary: ProvidePersonalData
      description: "Invoke *Data Extract* task in back-end system trough IPF. The\
        \ task collects all personal data of the specified person.\nAmong standard\
        \ attributes (see the [*Asynchronous Processing Model* section](asynchronous-processing-model)),\
        \ the *Personal Data Extract* task\nrequest specifies:\n+ identificationRecordIdValue:\
        \ Unique person identifier.\nThe *ProvidePersonalData* operation synchronously\
        \ returns the standard attributes (see the [*General Definitions* section](general-definitions)).\n\
        |               |System      |Owner        |                             \
        \       \n|:--------------|------------|-------------|\n|Provided by:   |IPF\
        \         | Dr.Max      |\n|Consumed by:   |GDPR BusApp | Dr. Max     |"
      operationId: GDPRServicesApiV1ProvidePersonDataPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRProvidePersonDataRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              manualBackend: ""
          schema:
            $ref: '#/definitions/GDPRmanualResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /GDPR-services/api/v1/provide-person-data/
          headers:
            Content-Type: application/json
          body: '{  "taskId": "44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",  "systemRegistrationId":
            "0046da06-bbf7-47a8-b6a6-6df962db1a75",  "timestamp": "2017-04-10T12:34:00.000Z",  "identificationRecordIdValue":
            "27",  "manual": {    "topTicketId": "69b667a5dbf85300d5abb14ffe9619c1",    "taskURL":
            "http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",    "transactionId":
            "7dbb84b34f013200be1430318110c7e8"  }}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "manualBackend":
            ""}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: ProvidePersonalData1
        x-testDescription: "Invoke *Data Extract* task in back-end system trough IPF.\
          \ The task collects all personal data of the specified person.\nAmong standard\
          \ attributes (see the [*Asynchronous Processing Model* section](asynchronous-processing-model)),\
          \ the *Personal Data Extract* task\nrequest specifies:\n+ identificationRecordIdValue:\
          \ Unique person identifier.\nThe *ProvidePersonalData* operation synchronously\
          \ returns the standard attributes (see the [*General Definitions* section](general-definitions)).\n\
          |               |System      |Owner        |                           \
          \         \n|:--------------|------------|-------------|\n|Provided by:\
          \   |IPF         | Dr.Max      |\n|Consumed by:   |GDPR BusApp | Dr. Max\
          \     |"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/data-extract/:
    post:
      tags:
      - GDPR-task
      summary: Data Extract
      description: "Returns results of *Provide Personal Data* task. This service\
        \ is called by back-end systems to return results of *Provide Personal Data*\
        \ task.\nThis service **MUST** be called separately for each person found\
        \ during the task execution.\nAmong standard attributes (see the [*Asynchronous\
        \ Processing Model* section](asynchronous-processing-model)), the *Data Extract*\
        \ request\ncontains collected personal data represented by an array of items:\n\
        + dataType: Mandatory personal data type.\n+ dataValue: Mandatory personal\
        \ data value.\n+ note: Additional information, just some test. Optional.\n\
        In case of need, there is possible also use the \"grouping\" design. This\
        \ option following *key : value* pattern as well as the simple one.\nThe structure\
        \ is based on `item`s which collect set of `subitem`s. Each  `item` collection\
        \ has itemType as an identification of data are stored in the collection.\n\
        This structure looks like this example:\n+ item\n    + subitem\n        +\
        \ dataType\n        + dataValue\n        + note - optional\n    + subitem\n\
        \        + dataType\n        + dataValue\n        + note - optional\n    +\
        \ note - optional\n|               |System           |Owner      |       \
        \                             \n|:--------------|-----------------|-----------|\n\
        |Provided by:   |IPF              | Dr. Max   |  \n|Consumed by:   |Backend\
        \ systems  | Dr. Max   |"
      operationId: GDPRServicesApiV1DataExtractPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRPersonDataExtract'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/GDPRCommonResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /GDPR-services/api/v1/data-extract/
          headers:
            Content-Type: application/json
          body: '{    "taskId": "44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",    "systemRegistrationId":
            "0046da06-bbf7-47a8-b6a6-6df962db1a75",    "timestamp": "2017-04-10T12:34:00.000Z",    "businessTimestamp":
            "2017-04-10T12:34:00.000Z",    "personalData": {      "item": [        {          "subitem":
            [            {              "dataType": "surname",              "dataValue":
            "Novák",              "note": "also known as Newman"            },            {              "dataType":
            "number of children",              "dataValue": "3",              "note":
            "but nobody knows..."            }          ],          "note": "the information
            which we know so far"        },        {          "subitem": [            {              "dataType":
            "phonePrefix",              "dataValue": "420",              "note": "Czech
            republic"            },            {              "dataType": "phoneNumber",              "dataValue":
            "123123123",              "note": "Local number"            }          ],          "note":
            "the oldest phone which we know"        },        {          "subitem":
            [            {              "dataType": "phonePrefix",              "dataValue":
            "420",              "note": "Czech republic"            },            {              "dataType":
            "phoneNumber",              "dataValue": "456456456",              "note":
            "Local number"            }          ],          "note": "the present
            phone which we know"        },        {          "subitem": [            {              "dataType":
            "town",              "dataValue": "Prague",              "note": "Note..."            },            {              "dataType":
            "district",              "dataValue": "Pankrác",              "note":
            "Note..."            },            {              "dataType": "streetAddress",              "dataValue":
            "Hvězdova",              "note": "Note..."            },            {              "dataType":
            "houseNumber",              "dataValue": "1234/56",              "note":
            "Note..."            },            {              "dataType": "zipCode",              "dataValue":
            "141 00",              "note": "Note..."            },            {              "dataType":
            "state",              "dataValue": "CZE",              "note": "Note..."            }          ],          "note":
            "the current address of the execution of the sentence"        },        {          "subitem":
            [            {              "dataType": "town",              "dataValue":
            "Prague",              "note": "Note..."            },            {              "dataType":
            "district",              "dataValue": "Ruzyňe",              "note": "Note..."            },            {              "dataType":
            "streetAddress",              "dataValue": "Staré nám.",              "note":
            "Note..."            },            {              "dataType": "houseNumber",              "dataValue":
            "3/12",              "note": "Note..."            },            {              "dataType":
            "zipCode",              "dataValue": "161 00",              "note": "Note..."            },            {              "dataType":
            "state",              "dataValue": "CZE",              "note": "Note..."            }          ],          "note":
            "previous address of execution of the sentence"        }      ],      "note":
            "top level note"    }}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Data Extract1
        x-testDescription: "Returns results of *Provide Personal Data* task. This\
          \ service is called by back-end systems to return results of *Provide Personal\
          \ Data* task.\nThis service **MUST** be called separately for each person\
          \ found during the task execution.\nAmong standard attributes (see the [*Asynchronous\
          \ Processing Model* section](asynchronous-processing-model)), the *Data\
          \ Extract* request\ncontains collected personal data represented by an array\
          \ of items:\n+ dataType: Mandatory personal data type.\n+ dataValue: Mandatory\
          \ personal data value.\n+ note: Additional information, just some test.\
          \ Optional.\nIn case of need, there is possible also use the \"grouping\"\
          \ design. This option following *key : value* pattern as well as the simple\
          \ one.\nThe structure is based on `item`s which collect set of `subitem`s.\
          \ Each  `item` collection has itemType as an identification of data are\
          \ stored in the collection.\nThis structure looks like this example:\n+\
          \ item\n    + subitem\n        + dataType\n        + dataValue\n       \
          \ + note - optional\n    + subitem\n        + dataType\n        + dataValue\n\
          \        + note - optional\n    + note - optional\n|               |System\
          \           |Owner      |                                    \n|:--------------|-----------------|-----------|\n\
          |Provided by:   |IPF              | Dr. Max   |  \n|Consumed by:   |Backend\
          \ systems  | Dr. Max   |"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-services/api/v1/forget-person/:
    post:
      tags:
      - GDPR-task
      summary: ForgetPersonalData
      description: "Invoke *Forget Personal Data* task in back-end system trough IPF.\
        \ The task removes all personal data of the specified person.\nAmong standard\
        \ attributes (see the [*Asynchronous Processing Model* section](asynchronous-processing-model)),\
        \ the *Forget Personal Data* task\nrequest specifies:\n+ identificationRecordIdValue:\
        \ Unique person identifier.\nThe *ForgetPersonalData* operation synchronously\
        \ returns the standard attributes (see the [*General Definitions* section](general-definitions)).\n\
        Successful response confirms that the task was received and will be processed\
        \ asynchronously.\n|               |System      |Owner        |          \
        \                          \n|:--------------|------------|-------------|\n\
        |Provided by:   |IPF         | Dr.Max      |\n|Consumed by:   |GDPR BusApp\
        \ | Dr. Max     |"
      operationId: GDPRServicesApiV1ForgetPersonPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRForgetPersonRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              manualBackend: ""
          schema:
            $ref: '#/definitions/GDPRmanualResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /GDPR-services/api/v1/forget-person/
          headers:
            Content-Type: application/json
          body: '{  "taskId": "44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",  "systemRegistrationId":
            "0046da06-bbf7-47a8-b6a6-6df962db1a75",  "timestamp": "2017-04-10T12:34:00.000Z",  "identificationRecordIdValue":
            "27",  "manual": {    "topTicketId": "69b667a5dbf85300d5abb14ffe9619c1",    "taskURL":
            "http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067",    "transactionId":
            "7dbb84b34f013200be1430318110c7e8"  }}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "manualBackend":
            ""}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: ForgetPersonalData1
        x-testDescription: "Invoke *Forget Personal Data* task in back-end system\
          \ trough IPF. The task removes all personal data of the specified person.\n\
          Among standard attributes (see the [*Asynchronous Processing Model* section](asynchronous-processing-model)),\
          \ the *Forget Personal Data* task\nrequest specifies:\n+ identificationRecordIdValue:\
          \ Unique person identifier.\nThe *ForgetPersonalData* operation synchronously\
          \ returns the standard attributes (see the [*General Definitions* section](general-definitions)).\n\
          Successful response confirms that the task was received and will be processed\
          \ asynchronously.\n|               |System      |Owner        |        \
          \                            \n|:--------------|------------|-------------|\n\
          |Provided by:   |IPF         | Dr.Max      |\n|Consumed by:   |GDPR BusApp\
          \ | Dr. Max     |"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-registration/api/v1/subscribe-system/:
    post:
      tags:
      - GDPR-management
      summary: Subscribe
      description: "Subscribes a new system to the GDPR processes. The subscribed\
        \ system must implement mandatory parts of the GDPR API.\nRequest message\
        \ contains subscription data (see [Subscription Data section](subscription-data)).\n\
        |Direction      |System           |Owner      |                          \
        \          \n|:--------------|-----------------|-----------|\n|Provided by:\
        \   |IPF              | Dr. Max   |  \n|Consumed by:   |Backend systems  |\
        \ Dr. Max   |"
      operationId: GDPRRegistrationApiV1SubscribeSystemPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRSystemRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
              timestamp: 2017-04-20T13:58:32.0000000Z
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/GDPRSystemResponse'
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /GDPR-registration/api/v1/unsubscribe-system/:
    post:
      tags:
      - GDPR-management
      summary: Unsubscribe
      description: "Unsubscribes the consuming system from the GDPR processes. The\
        \ system instance to be unsubscribed is identified by its *system registration\
        \ identifier*.\nThe service returns the standard attributes (see the [*General\
        \ Definitions* section](general-definitions)).\nOnce the system instance is\
        \ unsubscribed, IPF should **NOT** call GDPR API methods anymore.\n|Direction\
        \      |System           |Owner      |                                   \
        \ \n|:--------------|-----------------|-----------|\n|Provided by:   |IPF\
        \              | Dr. Max   |  \n|Consumed by:   |Backend systems  | Dr. Max\
        \   |"
      operationId: GDPRRegistrationApiV1UnsubscribeSystemPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/GDPRSRegistredSystem'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /GDPR-registration/api/v1/unsubscribe-system/
          headers:
            Content-Type: application/json
          body: '{  "systemRegistrationId": "0046da06-bbf7-47a8-b6a6-6df962db1a75",  "timestamp":
            "2017-04-20T13:58:32Z"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Unsubscribe1
        x-testDescription: "Unsubscribes the consuming system from the GDPR processes.\
          \ The system instance to be unsubscribed is identified by its *system registration\
          \ identifier*.\nThe service returns the standard attributes (see the [*General\
          \ Definitions* section](general-definitions)).\nOnce the system instance\
          \ is unsubscribed, IPF should **NOT** call GDPR API methods anymore.\n|Direction\
          \      |System           |Owner      |                                 \
          \   \n|:--------------|-----------------|-----------|\n|Provided by:   |IPF\
          \              | Dr. Max   |  \n|Consumed by:   |Backend systems  | Dr.\
          \ Max   |"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  CommonResponse:
    type: object
    required:
    - resultCode
    properties:
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: CommonResponse
    example:
      resultCode: true
      errorCode: OK
      errorDescription: OK.
  OrderStatus:
    type: string
    title: OrderStatus
    example: Basketed
    enum:
    - Basketed
    - Requested
    - PreparedForExpedition
    - Completed
    - Cancelled
    - InTrouble
    x-enum-elements:
    - name: Basketed
      description: ""
    - name: Requested
      description: ""
    - name: PreparedForExpedition
      description: ""
    - name: Completed
      description: ""
    - name: Cancelled
      description: ""
    - name: InTrouble
      description: ""
  OrderType:
    type: string
    title: OrderType
    example: eShop
    enum:
    - eShop
    - Reservation
    x-enum-elements:
    - name: eShop
      description: Standart order
    - name: Reservation
      description: Reservation on Pharmacy
  AvailabilityType:
    type: string
    title: availabilityType
    example: Stock
    enum:
    - Stock
    - CrossDock
    x-enum-elements:
    - name: Stock
      description: Standart stocks
    - name: CrossDock
      description: Supply chain
  OrderItem:
    type: object
    required:
    - additionalUnitPrice
    - orderItemId
    - productId
    - quantity
    - unitPrice
    - vatRate
    properties:
      orderItemId:
        type: number
        format: double
        description: Id of the item. Primary key.
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product. Foreign key.
      quantity:
        type: number
        format: double
        example: 5.0
        description: Quantity of the product.
      unitPrice:
        type: number
        format: double
        example: 25.0
        description: Unit price (incl. VAT) of the product.
      additionalUnitPrice:
        type: number
        format: double
        example: 35.0
        description: Additional unit price (incl. VAT) of the product.
      vatRate:
        type: number
        format: double
        example: 21.0
        description: VAT rate (percentage) of the product.
      rowDiscount:
        type: number
        format: double
        example: 0.0
        description: Total discount (incl. VAT) of the products on the row.
      couponId:
        type: number
        format: double
        example: 0.0
        description: Id of the discount coupon.
      productNote:
        type: string
        example: Note.
        description: Product note (colour, size).
      discountItems:
        type: array
        description: Discount items.
        items:
          type: string
    title: OrderItem
    example:
      unitPrice: 25.0
      discountItems:
      - discountItems
      - discountItems
      quantity: 5.0
      additionalUnitPrice: 35.0
      productId: 666111.0
      productNote: Note.
      orderItemId: 0.8008281904610115
      vatRate: 21.0
      rowDiscount: 0.0
      couponId: 0.0
  Order:
    type: object
    required:
    - customerFirstName
    - customerLastName
    - customerTown
    - dateTimeCreated
    - dateTimeReservationEnd
    - orderId
    - orderItems
    - pharmacyId
    - status
    - totalDiscount
    - totalPrice
    - totalRounding
    - totalVAT
    - typeOfOrder
    properties:
      orderId:
        type: number
        format: double
        example: 123.0
        description: Id of the reservation. Primary key.
      dateTimeCreated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was created.
      dateTimeReservationEnd:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Date and time when the reservation expires.
      status:
        $ref: '#/definitions/OrderStatus'
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      customerFirstName:
        type: string
        example: Jan
        description: First name of the customer.
      customerLastName:
        type: string
        example: Novák
        description: Last name of the customer.
      customerTown:
        type: string
        example: Praha
        description: 'Address of the customer: town (village).'
      orderItems:
        type: array
        description: Reservation items.
        items:
          $ref: '#/definitions/OrderItem'
      totalPrice:
        type: number
        format: double
        example: 575.0
        description: Total price (incl. VAT).
      totalVAT:
        type: number
        format: double
        example: 75.0
        description: Total VAT.
      totalDiscount:
        type: number
        format: double
        example: 575.0
        description: Total discount (incl. VAT).
      totalRounding:
        type: number
        format: double
        example: 0.0
        description: Total rounding amount (incl. VAT).
      typeOfOrder:
        $ref: '#/definitions/OrderType'
      dateTimeLastUpdated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was last updated.
      customerId:
        type: number
        format: double
        example: 123.0
        description: Id of the customer. Foreign key.
      customerLoyaltyCardId:
        type: string
        example: "123"
        description: Id of the customer loyalty card. Foreign key.
      customerStreet:
        type: string
        example: Dlouhá 21
        description: 'Address of the customer: street name (village name), house number.'
      customerEmail:
        type: string
        example: jan.novak@example.com
        description: Email address of the customer.
      customerPhone:
        type: string
        example: "420777123456"
        description: Phone number of the customer.
      customerNote:
        type: string
        example: Note from the customer.
        description: Note from the customer.
      loggedUser:
        type: number
        format: double
        example: 1.0
        description: Indicates, if the reservation has been filed by the user (1) or not (0).
    title: Order
    example:
      pharmacyId: 55.0
      orderId: 123.0
      totalPrice: 575.0
      dateTimeLastUpdated: 4/10/2017 12:34:00 PM
      customerStreet: Dlouhá 21
      loggedUser: 1.0
      totalRounding: 0.0
      orderItems:
      - unitPrice: 25.0
        discountItems:
        - discountItems
        - discountItems
        quantity: 5.0
        additionalUnitPrice: 35.0
        productId: 666111.0
        productNote: Note.
        orderItemId: 0.8008281904610115
        vatRate: 21.0
        rowDiscount: 0.0
        couponId: 0.0
      - unitPrice: 25.0
        discountItems:
        - discountItems
        - discountItems
        quantity: 5.0
        additionalUnitPrice: 35.0
        productId: 666111.0
        productNote: Note.
        orderItemId: 0.8008281904610115
        vatRate: 21.0
        rowDiscount: 0.0
        couponId: 0.0
      dateTimeReservationEnd: 4/15/2017 12:34:00 PM
      dateTimeCreated: 4/10/2017 12:34:00 PM
      totalVAT: 75.0
      customerPhone: "420777123456"
      customerFirstName: Jan
      customerEmail: jan.novak@example.com
      customerNote: Note from the customer.
      customerId: 123.0
      totalDiscount: 575.0
      customerLastName: Novák
      customerTown: Praha
      typeOfOrder: eShop
      status: Basketed
      customerLoyaltyCardId: "123"
  OrderWithCommonResponse:
    type: object
    properties:
      orderId:
        type: number
        format: double
        example: 123.0
        description: Id of the reservation. Primary key.
      dateTimeCreated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was created.
      dateTimeLastUpdated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was last updated.
      dateTimeReservationEnd:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Date and time when the reservation expires.
      status:
        $ref: '#/definitions/OrderStatus'
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      customerId:
        type: number
        format: double
        example: 123.0
        description: Id of the customer. Foreign key.
      customerLoyaltyCardId:
        type: string
        example: "123"
        description: Id of the customer loyalty card. Foreign key.
      customerFirstName:
        type: string
        example: Jan
        description: First name of the customer.
      customerLastName:
        type: string
        example: Novák
        description: Last name of the customer.
      customerStreet:
        type: string
        example: Dlouhá 21
        description: 'Address of the customer: street name (village name), house number.'
      customerTown:
        type: string
        example: Praha
        description: 'Address of the customer: town (village).'
      customerEmail:
        type: string
        example: jan.novak@example.com
        description: Email address of the customer.
      customerPhone:
        type: string
        example: "420777123456"
        description: Phone number of the customer.
      customerNote:
        type: string
        example: Note from the customer.
        description: Note from the customer.
      loggedUser:
        type: number
        format: double
        example: 1.0
        description: Indicates, if the reservation has been filed by the user (1) or not (0).
      orderItems:
        type: array
        description: Reservation items.
        items:
          $ref: '#/definitions/OrderItem'
      totalPrice:
        type: number
        format: double
        example: 575.0
        description: Total price (incl. VAT).
      totalVAT:
        type: number
        format: double
        example: 75.0
        description: Total VAT.
      totalDiscount:
        type: number
        format: double
        example: 575.0
        description: Total discount (incl. VAT).
      totalRounding:
        type: number
        format: double
        example: 0.0
        description: Total rounding amount (incl. VAT).
      typeOfOrder:
        $ref: '#/definitions/OrderType'
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: OrderWithCommonResponse
    example:
      errorDescription: OK.
      orderId: 123.0
      dateTimeLastUpdated: 4/10/2017 12:34:00 PM
      totalPrice: 575.0
      loggedUser: 1.0
      resultCode: true
      errorCode: OK
      orderItems:
      - unitPrice: 25.0
        discountItems:
        - discountItems
        - discountItems
        quantity: 5.0
        additionalUnitPrice: 35.0
        productId: 666111.0
        productNote: Note.
        orderItemId: 0.8008281904610115
        vatRate: 21.0
        rowDiscount: 0.0
        couponId: 0.0
      - unitPrice: 25.0
        discountItems:
        - discountItems
        - discountItems
        quantity: 5.0
        additionalUnitPrice: 35.0
        productId: 666111.0
        productNote: Note.
        orderItemId: 0.8008281904610115
        vatRate: 21.0
        rowDiscount: 0.0
        couponId: 0.0
      dateTimeCreated: 4/10/2017 12:34:00 PM
      customerPhone: "420777123456"
      totalVAT: 75.0
      customerEmail: jan.novak@example.com
      customerNote: Note from the customer.
      customerId: 123.0
      customerLastName: Novák
      typeOfOrder: eShop
      pharmacyId: 55.0
      customerStreet: Dlouhá 21
      totalRounding: 0.0
      dateTimeReservationEnd: 4/15/2017 12:34:00 PM
      customerFirstName: Jan
      totalDiscount: 575.0
      customerTown: Praha
      status: Basketed
      customerLoyaltyCardId: "123"
  OrderStatusRequest:
    type: object
    required:
    - orderStatus
    properties:
      orderStatus:
        $ref: '#/definitions/OrderStatus'
      note:
        type: string
        example: OK
        description: Note from the operator.
      userName:
        type: string
        example: novak01
        description: User name of the operator (pharmacy, call centre).
    title: OrderStatusRequest
    example:
      orderStatus: PreparedForExpedition
      note: OK
      userName: novak01
  GetStockProductAvailabilityItem:
    type: object
    required:
    - availabilityType
    - availableQuantity
    - productId
    properties:
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      availabilityType:
        $ref: '#/definitions/AvailabilityType'
      availabilityOnPharmacies:
        type: array
        description: Present if Availability Type is Stock
        items:
          $ref: '#/definitions/GetReversationProductAvailabilityItem'
    title: GetStockProductAvailabilityItem
  GetReversationProductAvailabilityItem:
    type: object
    required:
    - availableQuantity
    - isUpToDate
    - pharmacyId
    - providesReservation
    properties:
      pharmacyId:
        type: number
        format: double
        example: 666111.0
        description: Id of the pharmacy.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      providesReservation:
        type: boolean
        example: true
        description: True, if the pharmacy provides product reservations.
      isUpToDate:
        type: boolean
        example: true
        description: True, if the pharmacy is online and its stock item data is up-to-date.
    title: GetReversationProductAvailabilityItem
  AvailabilityWithCommonResponse:
    type: object
    properties:
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      availabilityType:
        $ref: '#/definitions/AvailabilityType'
      availabilityOnPharmacies:
        type: array
        description: Present if Availability Type is Stock
        items:
          $ref: '#/definitions/GetReversationProductAvailabilityItem'
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: AvailabilityWithCommonResponse
  ListOfProducts:
    type: object
    required:
    - productId
    properties:
      productId:
        type: array
        description: List of productIds
        items:
          type: string
    title: ListOfProducts
    example:
      productId:
      - 123
  StockProductsAvailabilityList:
    type: object
    required:
    - item
    properties:
      item:
        type: array
        description: List of availabl
        items:
          $ref: '#/definitions/GetStockProductAvailabilityItem'
    title: StockProductsAvailabilityList
  ReservationStatus:
    type: string
    title: ReservationStatus
    example: Basketed
    enum:
    - Basketed
    - Requested
    - PreparedForExpedition
    - Completed
    - Cancelled
    - InTrouble
    x-enum-elements:
    - name: Basketed
      description: ""
    - name: Requested
      description: ""
    - name: PreparedForExpedition
      description: ""
    - name: Completed
      description: ""
    - name: Cancelled
      description: ""
    - name: InTrouble
      description: ""
  DiscountItem:
    type: object
    required:
    - couponId
    - discount
    properties:
      couponId:
        type: number
        format: double
        example: 4.83945938E8
        description: Id of the discount coupon.
      discount:
        type: number
        format: double
        example: 15.0
        description: Discount.
    title: DiscountItem
  ReservationItem:
    type: object
    required:
    - additionalUnitPrice
    - productId
    - quantity
    - reservationItemId
    - unitPrice
    - vatRate
    properties:
      reservationItemId:
        type: number
        format: double
        description: Id of the item. Primary key.
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product. Foreign key.
      quantity:
        type: number
        format: double
        example: 5.0
        description: Quantity of the product.
      unitPrice:
        type: number
        format: double
        example: 25.0
        description: Unit price (incl. VAT) of the product.
      additionalUnitPrice:
        type: number
        format: double
        example: 35.0
        description: Additional unit price (incl. VAT) of the product.
      vatRate:
        type: number
        format: double
        example: 21.0
        description: VAT rate (percentage) of the product.
      rowDiscount:
        type: number
        format: double
        example: 0.0
        description: Total discount (incl. VAT) of the products on the row.
      couponId:
        type: number
        format: double
        example: 0.0
        description: Id of the discount coupon.
      productNote:
        type: string
        example: Note.
        description: Product note (colour, size).
      discountItems:
        type: array
        description: Discount items.
        items:
          $ref: '#/definitions/DiscountItem'
    title: ReservationItem
  Reservation:
    type: object
    required:
    - customerFirstName
    - customerLastName
    - customerTown
    - dateTimeCreated
    - dateTimeReservationEnd
    - pharmacyId
    - reservationId
    - reservationItems
    - status
    - totalDiscount
    - totalPrice
    - totalRounding
    - totalVAT
    properties:
      reservationId:
        type: number
        format: double
        example: 123.0
        description: Id of the reservation. Primary key.
      dateTimeCreated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was created.
      dateTimeReservationEnd:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Date and time when the reservation expires.
      status:
        $ref: '#/definitions/ReservationStatus'
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      customerFirstName:
        type: string
        example: Jan
        description: First name of the customer.
      customerLastName:
        type: string
        example: Novák
        description: Last name of the customer.
      customerTown:
        type: string
        example: Praha
        description: 'Address of the customer: town (village).'
      reservationItems:
        type: array
        description: Reservation items.
        items:
          $ref: '#/definitions/ReservationItem'
      totalPrice:
        type: number
        format: double
        example: 575.0
        description: Total price (incl. VAT).
      totalVAT:
        type: number
        format: double
        example: 75.0
        description: Total VAT.
      totalDiscount:
        type: number
        format: double
        example: 575.0
        description: Total discount (incl. VAT).
      totalRounding:
        type: number
        format: double
        example: 0.0
        description: Total rounding amount (incl. VAT).
      dateTimeLastUpdated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was last updated.
      customerId:
        type: number
        format: double
        example: 123.0
        description: Id of the customer. Foreign key.
      customerLoyaltyCardId:
        type: string
        example: "123"
        description: Id of the customer loyalty card. Foreign key.
      customerStreet:
        type: string
        example: Dlouhá 21
        description: 'Address of the customer: street name (village name), house number.'
      customerEmail:
        type: string
        example: jan.novak@example.com
        description: Email address of the customer.
      customerPhone:
        type: string
        example: "420777123456"
        description: Phone number of the customer.
      customerNote:
        type: string
        example: Note from the customer.
        description: Note from the customer.
      loggedUser:
        type: number
        format: double
        example: 1.0
        description: Indicates, if the reservation has been filed by the user (1) or not (0).
    title: Reservation
    example:
      reservationId: 123
      dateTimeCreated: 2017-04-10T12:34:00.0000000Z
      dateTimeLastUpdated: 2017-04-10T12:34:00.0000000Z
      dateTimeReservationEnd: 2017-04-15T12:34:00.0000000Z
      status: Requested
      pharmacyId: 55
      customerId: 123
      customerLoyaltyCardId: 123
      customerFirstName: Jan
      customerLastName: Novák
      customerStreet: Dlouhá 21
      customerTown: Praha
      customerEmail: jan.novak@example.com
      customerPhone: 420777123456
      customerNote: Note from the customer.
      loggedUser: 1
      reservationItems:
      - reservationItemId: 0
        productId: 666111
        quantity: 5
        unitPrice: 25
        additionalUnitPrice: 35
        vatRate: 21
        rowDiscount: 0
        couponId: 0
        productNote: Note.
        discountItems:
        - couponId: 483945938
          discount: 15
      totalPrice: 575
      totalVAT: 75
      totalDiscount: 575
      totalRounding: 0
  ReservationWithCommonResponse:
    type: object
    properties:
      reservationId:
        type: number
        format: double
        example: 123.0
        description: Id of the reservation. Primary key.
      dateTimeCreated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was created.
      dateTimeLastUpdated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was last updated.
      dateTimeReservationEnd:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Date and time when the reservation expires.
      status:
        $ref: '#/definitions/ReservationStatus'
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      customerId:
        type: number
        format: double
        example: 123.0
        description: Id of the customer. Foreign key.
      customerLoyaltyCardId:
        type: string
        example: "123"
        description: Id of the customer loyalty card. Foreign key.
      customerFirstName:
        type: string
        example: Jan
        description: First name of the customer.
      customerLastName:
        type: string
        example: Novák
        description: Last name of the customer.
      customerStreet:
        type: string
        example: Dlouhá 21
        description: 'Address of the customer: street name (village name), house number.'
      customerTown:
        type: string
        example: Praha
        description: 'Address of the customer: town (village).'
      customerEmail:
        type: string
        example: jan.novak@example.com
        description: Email address of the customer.
      customerPhone:
        type: string
        example: "420777123456"
        description: Phone number of the customer.
      customerNote:
        type: string
        example: Note from the customer.
        description: Note from the customer.
      loggedUser:
        type: number
        format: double
        example: 1.0
        description: Indicates, if the reservation has been filed by the user (1) or not (0).
      reservationItems:
        type: array
        description: Reservation items.
        items:
          $ref: '#/definitions/ReservationItem'
      totalPrice:
        type: number
        format: double
        example: 575.0
        description: Total price (incl. VAT).
      totalVAT:
        type: number
        format: double
        example: 75.0
        description: Total VAT.
      totalDiscount:
        type: number
        format: double
        example: 575.0
        description: Total discount (incl. VAT).
      totalRounding:
        type: number
        format: double
        example: 0.0
        description: Total rounding amount (incl. VAT).
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: ReservationWithCommonResponse
    example:
      reservationId: 123
      dateTimeCreated: 2017-04-10T12:34:00.0000000Z
      dateTimeLastUpdated: 2017-04-10T12:34:00.0000000Z
      dateTimeReservationEnd: 2017-04-15T12:34:00.0000000Z
      status: Requested
      pharmacyId: 55
      customerId: 123
      customerLoyaltyCardId: 123
      customerFirstName: Jan
      customerLastName: Novák
      customerStreet: Dlouhá 21
      customerTown: Praha
      customerEmail: jan.novak@example.com
      customerPhone: 420777123456
      customerNote: Note from the customer.
      loggedUser: 1
      reservationItems:
      - reservationItemId: 0
        productId: 666111
        quantity: 5
        unitPrice: 25
        additionalUnitPrice: 35
        vatRate: 21
        rowDiscount: 0
        couponId: 0
        productNote: Note.
        discountItems:
        - couponId: 483945938
          discount: 15
      totalPrice: 575
      totalVAT: 75
      totalDiscount: 575
      totalRounding: 0
      resultCode: true
      errorCode: OK
      errorDescription: OK.
  ReservationHistoryItem:
    type: object
    required:
    - reservationHistoryItemId
    - status
    properties:
      reservationHistoryItemId:
        type: number
        format: double
        description: Id of the item. Primary key.
      status:
        $ref: '#/definitions/ReservationStatus'
      dateTime:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the item was created.
      userName:
        type: string
        example: novak01
        description: User name of the operator (pharmacy, call centre).
      userNote:
        type: string
        example: Note from the operator.
        description: Note from the operator (pharmacy, call centre).
    title: ReservationHistoryItem
  ReservationHistoryItems:
    type: object
    properties:
      reservationHistoryItems:
        type: array
        description: Reservation history items.
        items:
          $ref: '#/definitions/ReservationHistoryItem'
    title: ReservationHistoryItems
    example:
      reservationHistoryItems:
      - reservationHistoryItemId: 0
        dateTime: 2017-04-10T12:34:00.0000000Z
        status: InTrouble
        userName: novak01
        userNote: Note from the operator.
  ReservationStatusRequest:
    type: object
    required:
    - reservationStatus
    properties:
      reservationStatus:
        $ref: '#/definitions/ReservationStatus'
      note:
        type: string
        example: OK
        description: Note from the operator.
      userName:
        type: string
        example: novak01
        description: User name of the operator (pharmacy, call centre).
    title: ReservationStatusRequest
    example:
      reservationStatus: PreparedForExpedition
      note: OK
      userName: novak01
  ReservationDateTimeReservationEndRequest:
    type: object
    required:
    - dateTimeReservationEnd
    properties:
      dateTimeReservationEnd:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Date and time when the reservation expires.
      note:
        type: string
        example: OK
        description: Note from the operator.
      userName:
        type: string
        example: novak02
        description: User name of the operator (pharmacy, call centre).
    title: ReservationDateTimeReservationEndRequest
    example:
      dateTimeReservationEnd: 2017-04-15T12:34:00.0000000Z
      note: OK
      userName: novak02
  StockItemCheckPharmacyRequest:
    type: object
    required:
    - pharmacyId
    - productId
    properties:
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      productId:
        type: array
        description: Id of the products. Foreign key.
        items:
          type: number
          format: double
    title: StockItemCheckPharmacyRequest
    example:
      pharmacyId: 55.0
      productId:
      - 0.8008281904610115
      - 0.8008281904610115
  StockItemCheckPharmacyItem:
    type: object
    required:
    - availableQuantity
    - productId
    properties:
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product item. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
    title: StockItemCheckPharmacyItem
  StockItemCheckPharmacyResponse:
    type: object
    required:
    - items
    - pharmacyId
    properties:
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      items:
        type: array
        description: Items.
        items:
          $ref: '#/definitions/StockItemCheckPharmacyItem'
    title: StockItemCheckPharmacyResponse
    example:
      pharmacyId: 55
      items:
      - productId: 50024913
        availableQuantity: 6
      - productId: 50096072
        availableQuantity: 5
  StockItemCheckPharmacyCountRequest:
    type: object
    required:
    - productId
    properties:
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product. Foreign key.
    title: StockItemCheckPharmacyCountRequest
    example:
      productId: 50024913
  StockItemCheckPharmacyCountResponse:
    type: object
    required:
    - pharmacyCount
    properties:
      pharmacyCount:
        type: number
        format: double
        example: 321.0
        description: Pharmacy count where required item is available.
    title: StockItemCheckPharmacyCountResponse
    example:
      pharmacyCount: 321
  StockItemCheckPharmacyListRequest:
    type: object
    required:
    - pharmacyIds
    - productId
    properties:
      pharmacyIds:
        type: array
        description: Id of the pharmacy. Foreign key.
        items:
          type: number
          format: double
      productId:
        type: number
        format: double
        description: Id of the product. Foreign key.
    title: StockItemCheckPharmacyListRequest
    example:
      pharmacyIds:
      - 56
      - 57
      productId: 50024913
  StockItemCheckPharmacyListItem:
    type: object
    required:
    - availableQuantity
    - pharmacyId
    - productId
    properties:
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy.
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product item. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
    title: StockItemCheckPharmacyListItem
  StockItemCheckPharmacyListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        description: Items.
        items:
          $ref: '#/definitions/StockItemCheckPharmacyListItem'
    title: StockItemCheckPharmacyListResponse
    example:
      items:
      - pharmacyId: 56
        productId: 50024913
        availableQuantity: 6
      - pharmacyId: 57
        productId: 50024913
        availableQuantity: 5
  GetPharmacyProductAvailabilityRequest:
    type: object
    required:
    - pharmacyIds
    - productIds
    properties:
      pharmacyIds:
        type: array
        description: Ids of the pharmacies. More than 20 ids is not allowed.
        items:
          type: number
          format: double
      productIds:
        type: array
        description: Ids of the products. More than 20 ids is not allowed.
        items:
          type: number
          format: double
    title: GetPharmacyProductAvailabilityRequest
    example:
      pharmacyIds:
      - 55
      - 66
      productIds:
      - 50024913
      - 50096072
  GetPharmacyProductAvailabilityItem:
    type: object
    required:
    - availableQuantity
    - pharmacyId
    - productId
    properties:
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy.
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
    title: GetPharmacyProductAvailabilityItem
  GetPharmacyProductAvailabilityResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        description: Items.
        items:
          $ref: '#/definitions/GetPharmacyProductAvailabilityItem'
    title: GetPharmacyProductAvailabilityResponse
    example:
      items:
      - pharmacyId: 55
        productId: 50024913
        availableQuantity: 6
      - pharmacyId: 55
        productId: 50096072
        availableQuantity: 5
      - pharmacyId: 66
        productId: 50024913
        availableQuantity: 6
      - pharmacyId: 66
        productId: 50096072
        availableQuantity: 5
  GetPharmacyProductDetailRequest:
    type: object
    required:
    - pharmacyIds
    - productIds
    properties:
      pharmacyIds:
        type: array
        description: Ids of the pharmacies. More than 20 ids is not allowed.
        items:
          type: number
          format: double
      productIds:
        type: array
        description: Ids of the products. More than 20 ids is not allowed.
        items:
          type: number
          format: double
    title: GetPharmacyProductDetailRequest
    example:
      pharmacyIds:
      - 55
      - 66
      productIds:
      - 50024913
      - 50096072
  GetPharmacyProductDetailItem:
    type: object
    required:
    - availableQuantity
    - frozenQuantity
    - isUpToDate
    - pharmacyId
    - productId
    - providesReservation
    - reservedQuantity
    - totalQuantity
    properties:
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy.
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product.
      totalQuantity:
        type: number
        format: double
        example: 60.0
        description: Total quantity of the product at the pharmacy.
      reservedQuantity:
        type: number
        format: double
        example: 6.0
        description: Reserved quantity of the product at the pharmacy.
      frozenQuantity:
        type: number
        format: double
        example: 6.0
        description: Frozen quantity of the product at the pharmacy.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      providesReservation:
        type: boolean
        example: true
        description: True, if the pharmacy provides product reservations.
      isUpToDate:
        type: boolean
        example: true
        description: True, if the pharmacy is online and its stock item data is up-to-date.
    title: GetPharmacyProductDetailItem
  GetPharmacyProductDetailResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        description: Items.
        items:
          $ref: '#/definitions/GetPharmacyProductDetailItem'
    title: GetPharmacyProductDetailResponse
    example:
      items:
      - pharmacyId: 55
        productId: 50024913
        totalQuantity: 60
        reservedQuantity: 50
        frozenQuantity: 4
        availableQuantity: 6
        providesReservation: true
        isUpToDate: false
      - pharmacyId: 55
        productId: 50096072
        totalQuantity: 50
        reservedQuantity: 40
        frozenQuantity: 5
        availableQuantity: 5
        providesReservation: true
        isUpToDate: false
      - pharmacyId: 66
        productId: 50024913
        totalQuantity: 60
        reservedQuantity: 50
        frozenQuantity: 4
        availableQuantity: 6
        providesReservation: false
        isUpToDate: true
      - pharmacyId: 66
        productId: 50096072
        totalQuantity: 50
        reservedQuantity: 40
        frozenQuantity: 5
        availableQuantity: 5
        providesReservation: false
        isUpToDate: true
  Pharmacy:
    type: object
    required:
    - endpointId
    - pharmacyId
    - pharmacyName
    - reservationPackageExpirationHours
    - reservationPackageService
    properties:
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Primary key.
      pharmacyName:
        type: string
        example: Lékárna Na Poříčí
        description: Name of the pharmacy.
      reservationPackageService:
        type: boolean
        example: true
        description: True means Reservation Package Service is provided in this pharmacy.
      reservationPackageExpirationHours:
        type: number
        format: double
        example: 72.0
        description: The package expires after this time period (number of hours).
      endpointId:
        type: number
        format: double
        example: 32.0
        description: Id of the endpoint. Foreign key.
    title: Pharmacy
    example:
      pharmacyId: 55
      pharmacyName: Lékárna Na Poříčí
      reservationPackageService: true
      reservationPackageExpirationHours: 72
      endpointId: 32
  PharmacyList:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        description: Items.
        items:
          $ref: '#/definitions/Pharmacy'
    title: PharmacyList
  FrozenQuantityItem:
    type: object
    required:
    - frozenQuantity
    - pharmacyId
    - productId
    properties:
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product. Foreign key.
      frozenQuantity:
        type: number
        format: double
        example: 6.0
        description: Frozen quantity of the product item.
    title: FrozenQuantityItem
    example:
      pharmacyId: 55
      productId: 666111
      frozenQuantity: 6
  FrozenQuantityList:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        description: Items.
        items:
          $ref: '#/definitions/FrozenQuantityItem'
    title: FrozenQuantityList
  CouponCompensation:
    type: object
    required:
    - name
    - status
    - type
    properties:
      name:
        type: string
        example: Sleva20
        description: Name of the coupon.
      type:
        type: string
        example: K
        description: Type of the coupon.
      status:
        type: string
        example: A
        description: Status of the coupon.
      compensation:
        type: number
        format: double
        example: 20.0
        description: Compensation value.
      validFrom:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Start date and time of validity period.
      validTo:
        type: string
        example: 4/15/2017 6:55:00 PM
        description: End date and time of validity period.
    title: CouponCompensation
    example:
      name: Sleva20
      type: K
      status: A
      compensation: 20
      validFrom: 2017-04-15T12:34:00.0000000Z
      validTo: 2017-04-15T18:55:00.0000000Z
  CouponDiscount:
    type: object
    required:
    - name
    - status
    - type
    properties:
      name:
        type: string
        example: Sleva20
        description: Name of the coupon.
      type:
        type: string
        example: N
        description: Type of the coupon.
      status:
        type: string
        example: A
        description: Status of the coupon.
      validFrom:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Start date and time of validity period.
      validTo:
        type: string
        example: 4/15/2017 6:55:00 PM
        description: End date and time of validity period.
    title: CouponDiscount
    example:
      name: Sleva20
      type: N
      status: A
      validFrom: 2017-04-15T12:34:00.0000000Z
      validTo: 2017-04-15T18:55:00.0000000Z
  CouponResponse:
    type: object
    properties:
      couponId:
        type: number
        format: double
        example: 321.0
        description: Coupon identifier.
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: CouponResponse
    example:
      couponId: 321
      resultCode: true
      errorCode: OK
      errorDescription: OK.
  CommonCreateTicketRequest:
    type: object
    required:
    - externalApplication
    - transactionId
    properties:
      externalApplication:
        type: string
        example: GDPR
        description: The name of the calling application.
      transactionId:
        type: string
        example: 44e70a570fa04c99b8f9b4cbb78fb067
        description: Unique ID of process transaction.
      externalTicketId:
        type: string
        example: "123456789"
        description: External ticket identifier.
    title: CommonCreateTicketRequest
  CreateTopTicketRequest:
    type: object
    required:
    - catalogItem
    - description
    - link
    properties:
      catalogItem:
        type: string
        example: 11a70a570fa04c99b8f9b4cbb78fb067
        description: Catalog item related to GDPR. Calling system can choose from predefined set of values defined by the Service Now supplier.
      link:
        type: string
        example: http://hostname/path/to/resource
        description: URL of the appropriate workflow in the GDPR Bus.
      description:
        type: string
        example: Description of the business case.
        description: Textual description of the top ticket.
      externalTicketId:
        type: string
        example: "123456789"
        description: External ticket identifier.
      externalApplication:
        type: string
        example: GDPR
        description: The name of the calling application.
      transactionId:
        type: string
        example: 44e70a570fa04c99b8f9b4cbb78fb067
        description: Unique ID of process transaction.
    title: CreateTopTicketRequest
    example:
      externalTicketId: 123456789
      externalApplication: GDPR
      transactionId: 44e70a570fa04c99b8f9b4cbb78fb067
      catalogItem: 11a70a570fa04c99b8f9b4cbb78fb067
      link: http://hostname/path/to/resource
      description: Description of the business case.
  CreateTaskTicketRequest:
    type: object
    required:
    - assignmentGroup
    - description
    - dueDateTime
    - requestItem
    - shortDescription
    properties:
      requestItem:
        type: string
        example: 22f70a570fa04c99b8f9b4cbb78fb067
        description: Identifier of the appropriate *top ticket*.
      assignmentGroup:
        type: string
        example: 33e70a570fa04c88b8f9b4cbb78fb760
        description: Identifier of assignment group in Service Now. Calling system can choose from predefined set of values defined by the Service Now supplier.
      dueDateTime:
        type: string
        example: 6/15/2018 6:55:00 PM
        description: Due date and time formatted according ISO-8601. Explicit time zone is supposed.
      shortDescription:
        type: string
        example: Short description of the task.
        description: Short textual description of the task ticket.
      description:
        type: string
        example: Description of the task.
        description: Textual description of the task ticket.
      externalTicketId:
        type: string
        example: "123456789"
        description: External ticket identifier.
      externalApplication:
        type: string
        example: GDPR
        description: The name of the calling application.
      transactionId:
        type: string
        example: 44e70a570fa04c99b8f9b4cbb78fb067
        description: Unique ID of process transaction.
    title: CreateTaskTicketRequest
    example:
      externalTicketId: 123456789
      externalApplication: GDPR
      transactionId: 44e70a570fa04c99b8f9b4cbb78fb067
      requestItem: 22f70a570fa04c99b8f9b4cbb78fb067
      assignmentGroup: 33e70a570fa04c88b8f9b4cbb78fb760
      dueDateTime: 2018-06-15T18:55:00.0000000Z
      shortDescription: Short description of the task.
      description: Description of the task.
  AddCommentRequest:
    type: object
    required:
    - comments
    - ticketId
    - ticketType
    properties:
      ticketType:
        type: string
        example: sc_task
        description: Type of the ticket.
      ticketId:
        type: string
        example: 22a55a570fa04c88b8f9b4cbb78fb760
        description: Identifier of the ticket.
      comments:
        type: string
        example: Textual comments
        description: Textual comments.
      workNotes:
        type: string
        example: Textual work notes
        description: Textual work notes.
      externalTicketId:
        type: string
        example: "123456789"
        description: External ticket identifier.
      externalApplication:
        type: string
        example: GDPR
        description: The name of the calling application.
      transactionId:
        type: string
        example: 44e70a570fa04c99b8f9b4cbb78fb067
        description: Unique ID of process transaction.
    title: AddCommentRequest
    example:
      ticketType: sc_task
      ticketId: 22a55a570fa04c88b8f9b4cbb78fb760
      externalTicketId: 123456789
      externalApplication: GDPR
      transactionId: 44e70a570fa04c99b8f9b4cbb78fb067
      workNotes: Textual work notes
      comments: Textual comments
  UpdateTicketStatusRequest:
    type: object
    required:
    - status
    - ticketId
    - ticketType
    properties:
      ticketType:
        type: string
        example: sc_task
        description: Type of the ticket.
      ticketId:
        type: string
        example: 22a55a570fa04c88b8f9b4cbb78fb760
        description: Identifier of the ticket.
      status:
        type: string
        example: finished
        description: New status of the ticket.
      externalTicketId:
        type: string
        example: "123456789"
        description: External ticket identifier.
      externalApplication:
        type: string
        example: GDPR
        description: The name of the calling application.
      transactionId:
        type: string
        example: 44e70a570fa04c99b8f9b4cbb78fb067
        description: Unique ID of process transaction.
    title: UpdateTicketStatusRequest
    example:
      ticketType: sc_task
      ticketId: 22a55a570fa04c88b8f9b4cbb78fb760
      externalTicketId: 123456789
      externalApplication: GDPR
      transactionId: 44e70a570fa04c99b8f9b4cbb78fb067
      status: finished
  CreateTicketResponse:
    type: object
    properties:
      ticketId:
        type: string
        example: 22a55a570fa04c88b8f9b4cbb78fb760
        description: Identifier of the new ticket created in Service now. If the ticket creation fails, this attribute is omitted.
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: CreateTicketResponse
    example:
      ticketId: 22a55a570fa04c88b8f9b4cbb78fb760
      resultCode: true
      errorCode: OK
      errorDescription: OK.
  GDPRBusTaskAnswer:
    type: object
    required:
    - data
    properties:
      data:
        type: array
        description: Data of answer
        items:
          $ref: '#/definitions/GDPRBusTaskAnswerData'
      businessDate:
        type: string
        description: Datetime of business validity of data provided
      transportDate:
        type: string
        description: Datetime when data was provided to IPF
    title: GDPRBusTaskAnswer
  GDPRBusTaskAnswerData:
    type: object
    required:
    - dataType
    - dataValue
    properties:
      dataType:
        type: string
        description: Type of searched data.
      dataValue:
        type: string
        example: Novák
        description: The value
    title: GDPRBusTaskAnswerData
  CommonGDPRTaskRequest:
    type: object
    required:
    - taskId
    - timestamp
    properties:
      taskId:
        type: string
        example: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: Task identifier. GUID, created by GDPR BUS.
      timestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
    title: CommonGDPRTaskRequest
  CommonGDPRTaskStatusRequest:
    type: object
    required:
    - systemRegistrationId
    - taskId
    - timestamp
    properties:
      taskId:
        type: string
        example: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: Task identifier. Used as the correlation identifier.
      systemRegistrationId:
        type: string
        example: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        description: GUID, assigned by IPF during system subscription.
      timestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
    title: CommonGDPRTaskStatusRequest
  CommonGDPRTaskResultRequest:
    title: CommonGDPRTaskResultRequest
    allOf:
    - $ref: '#/definitions/CommonGDPRTaskStatusRequest'
    - type: object
      required:
      - businessTimestamp
      properties:
        businessTimestamp:
          type: string
          example: 4/10/2017 12:34:00 PM
          description: Timestamp of the business data.
  GDPRTaskStatusRequest:
    title: GDPRTaskStatusRequest
    allOf:
    - $ref: '#/definitions/CommonGDPRTaskStatusRequest'
    - type: object
      required:
      - taskStatus
      properties:
        taskStatus:
          type: string
          example: finished
          description: New task status.
          default: finished
      example:
        taskId: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        timestamp: 2017-04-10T12:34:00.0000000Z
        taskStatus: finished
  GDPRTaskStatusResponse:
    title: GDPRTaskStatusResponse
    allOf:
    - $ref: '#/definitions/CommonGDPRTaskStatusRequest'
    - type: object
      required:
      - taskStatus
      properties:
        taskStatus:
          type: string
          example: finished
          description: New task status.
          default: finished
  IdentificationAreaEnumeration:
    type: string
    title: IdentificationAreaEnumeration
    example: surname
    enum:
    - surname
    - name
    - title
    - gender
    - email
    - phonePrefix
    - phoneNumber
    - mobilePrefix
    - mobileNumber
    - town
    - district
    - streetAddress
    - houseNumber
    - zipCode
    - state
    - pin
    - hin
    - birthDate
    - birthPlace
    - clientCardNum
    x-enum-elements:
    - name: surname
      description: person's surname.
    - name: name
      description: person's first name.
    - name: title
      description: academic titles
    - name: gender
      description: 'person''s gender TODO: list of genders 2, 3 or 5 how much politicaly
        correct are we going to be'
    - name: email
      description: person's email, validated structure.
    - name: phonePrefix
      description: prson's phonenumber prefix
    - name: phoneNumber
      description: person's phone number, international structure.
    - name: mobilePrefix
      description: prson's  mobile phone number prefix
    - name: mobileNumber
      description: person's mobile phone number, international structure.
    - name: town
      description: person's city , normalized.
    - name: district
      description: district part of adress
    - name: streetAddress
      description: person's street , normalized.
    - name: houseNumber
      description: person's house number
    - name: zipCode
      description: person's zip code
    - name: state
      description: country
    - name: pin
      description: person's personal identification tbd- birth number, id...
    - name: hin
      description: person's health insurance number
    - name: birthDate
      description: person's date of birth
    - name: birthPlace
      description: person's place of birth
    - name: clientCardNum
      description: person's loyalty card info, eg. loyalty club v CR.
  GDPRPersonIdentityData:
    type: object
    required:
    - identificationValue
    properties:
      identificationValue:
        type: string
        example: Novák
        description: The value which could be searched.
      identificationArea:
        $ref: '#/definitions/IdentificationAreaEnumeration'
    title: GDPRPersonIdentityData
    example:
      identificationArea: surname
      identificationValue: Novák
  GDPRFoundPersons:
    type: object
    required:
    - businessTimestamp
    - identificationData
    - identificationRecordIdValue
    - systemRegistrationId
    - taskId
    - timestamp
    properties:
      taskId:
        type: string
        example: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: GUID, created by GDPR BUS, unique for the original request.
      systemRegistrationId:
        type: string
        example: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        description: GUID, assigned by IPF during system subscription.
      timestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
      businessTimestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp when data are valid.
      identificationData:
        type: array
        description: Unique identifier of a found person.
        items:
          $ref: '#/definitions/GDPRPersonIdentityData'
      identificationRecordIdValue:
        type: string
        example: "27"
        description: Unique value of the identifier that identifies the person found in calling back-end system.
    title: GDPRFoundPersons
    example:
      taskId: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
      systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
      timestamp: 2017-04-10T12:34:00.0000000Z
      businessTimestamp: 2017-04-10T12:34:00.0000000Z
      identificationRecordIdValue: 0046da06
      identificationData:
      - identificationArea: surname
        identificationValue: Novák
      - identificationArea: name
        identificationValue: Petr
      - identificationArea: title
        identificationValue: Ing.
      - identificationArea: email
        identificationValue: petr.novak@mail.cz
      - identificationArea: phonePrefix
        identificationValue: 420
      - identificationArea: phoneNumber
        identificationValue: 123123123
      - identificationArea: mobilePrefix
        identificationValue: 420
      - identificationArea: mobileNumber
        identificationValue: 567567567
      - identificationArea: town
        identificationValue: Prague
      - identificationArea: district
        identificationValue: Pankrác
      - identificationArea: streetAddress
        identificationValue: Hvězdova
      - identificationArea: houseNumber
        identificationValue: 1234/56
      - identificationArea: zipCode
        identificationValue: 141 00
      - identificationArea: state
        identificationValue: CZE
      - identificationArea: pin
        identificationValue: 420511/123
      - identificationArea: hin
        identificationValue: 123456
      - identificationArea: birthDate
        identificationValue: 1942-05-11
      - identificationArea: birthPlace
        identificationValue: Wiena
      - identificationArea: clientCardNum
        identificationValue: 9876-09876
  GDPRPersonDataExtract:
    type: object
    required:
    - businessTimestamp
    - personalData
    - systemRegistrationId
    - taskId
    - timestamp
    properties:
      taskId:
        type: string
        example: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: GUID, created by GDPR BUS, unique for the original request.
      systemRegistrationId:
        type: string
        example: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        description: GUID, assigned by IPF during system subscription.
      timestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
      businessTimestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp when data are valid.
      personalData:
        $ref: '#/definitions/GDPRPersonData'
    title: GDPRPersonDataExtract
    example:
      taskId: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
      systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
      timestamp: 2017-04-10T12:34:00.0000000Z
      businessTimestamp: 2017-04-10T12:34:00.0000000Z
      personalData:
        item:
        - subitem:
          - dataType: surname
            dataValue: Novák
            note: also known as Newman
          - dataType: number of children
            dataValue: 3
            note: but nobody knows...
          note: the information which we know so far
        - subitem:
          - dataType: phonePrefix
            dataValue: 420
            note: Czech republic
          - dataType: phoneNumber
            dataValue: 123123123
            note: Local number
          note: the oldest phone which we know
        - subitem:
          - dataType: phonePrefix
            dataValue: 420
            note: Czech republic
          - dataType: phoneNumber
            dataValue: 456456456
            note: Local number
          note: the present phone which we know
        - subitem:
          - dataType: town
            dataValue: Prague
            note: Note...
          - dataType: district
            dataValue: Pankrác
            note: Note...
          - dataType: streetAddress
            dataValue: Hvězdova
            note: Note...
          - dataType: houseNumber
            dataValue: 1234/56
            note: Note...
          - dataType: zipCode
            dataValue: 141 00
            note: Note...
          - dataType: state
            dataValue: CZE
            note: Note...
          note: the current address of the execution of the sentence
        - subitem:
          - dataType: town
            dataValue: Prague
            note: Note...
          - dataType: district
            dataValue: Ruzyňe
            note: Note...
          - dataType: streetAddress
            dataValue: Staré nám.
            note: Note...
          - dataType: houseNumber
            dataValue: 3/12
            note: Note...
          - dataType: zipCode
            dataValue: 161 00
            note: Note...
          - dataType: state
            dataValue: CZE
            note: Note...
          note: previous address of execution of the sentence
        note: top level note
  GDPRPersonData:
    type: object
    required:
    - item
    properties:
      item:
        type: array
        description: Personal data extracted by the calling back-end system.
        items:
          $ref: '#/definitions/GDPRItem'
      note:
        type: string
        example: Additional information
        description: Additional information
    title: GDPRPersonData
  GDPRItem:
    type: object
    required:
    - subitem
    properties:
      subitem:
        type: array
        description: Personal data extracted by the calling back-end system.
        items:
          $ref: '#/definitions/GDPRSubItem'
      note:
        type: string
        example: additional information
        description: Additional information, just some text
    title: GDPRItem
  GDPRSubItem:
    type: object
    required:
    - dataType
    - dataValue
    properties:
      dataType:
        type: string
        example: number of kids
        description: Personal data type.
      dataValue:
        type: string
        example: "3"
        description: Personal data value.
      note:
        type: string
        example: additional information
        description: Additional information, just some text
    title: GDPRSubItem
  GDPRApplication:
    type: object
    required:
    - country
    - endDate
    - gpmId
    - id
    - mustVerify
    - pId
    - snowId
    - startDate
    - subject
    - type
    - verified
    properties:
      id:
        type: string
        example: "123"
        description: Application identification
      subject:
        type: string
        example: Ja* St**
        description: Application subject name and surname
      pId:
        type: string
        example: 12*
        description: Person identifier
      mustVerify:
        type: boolean
        example: true
        description: Flag if application must be verified
      verified:
        type: boolean
        example: false
        description: Flag if application is verified
      startDate:
        type: string
        example: 4/10/2018 12:34:00 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
      endDate:
        type: string
        example: 4/10/2018 12:34:00 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
      gpmId:
        type: string
        example: 03b6ee55-4b9f-4a0b-8310-8b824a952c33
        description: GPM internal GUID
      country:
        type: string
        example: CZE
        description: ISO country code 3*char
      snowId:
        type: string
        example: snowid
        description: SNOW identifier of top ticket
      type:
        type: string
        example: type
        description: Type of application (info, forget, other)
    title: GDPRApplication
    example:
      resultCode: true
      errorCode: OK
      errorDescription: OK.
      id: 123
      subject: Ja* St**
      pId: 12*
      mustVerify: true
      verified: false
      startDate: 2018-04-10T12:34:00.0000000Z
      endDate: 2018-04-10T12:34:00.0000000Z
      gpmId: 03b6ee55-4b9f-4a0b-8310-8b824a952c33
      country: CZE
      snowId: snowid
      type: type
  GDPRFindPersonResponse:
    type: object
    properties:
      addressedSystems:
        type: array
        description: In case of no subscribed system, this object is not present in answe
        items:
          $ref: '#/definitions/GDPRAddressedSystems'
    title: GDPRFindPersonResponse
    example:
      addressedSystems:
      - systemName: RandomSystem
        systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        manualBackend: true
        systemInstance: Country.RandomSystem.InstancIdentifier
      - systemName: RandomSystem
        systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        manualBackend: true
        systemInstance: Country.RandomSystem.InstancIdentifier
  GDPRAddressedSystems:
    type: object
    required:
    - manualBackend
    - systemInstance
    - systemName
    - systemRegistrationId
    properties:
      systemName:
        type: string
        example: RandomSystem
        description: The name of the system to be subscribed to GDPR processes.
      systemInstance:
        type: string
        example: Country.RandomSystem.InstancIdentifier
        description: Instance identifier of the system to be subscribed to GDPR processes.
      systemRegistrationId:
        type: string
        example: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        description: GUID, assigned by IPF during system subscription.
      manualBackend:
        type: boolean
        example: true
        description: '*true* for SNOW instance which mask unexisting implementation
          GDPR in Back-end, *false* real backend behind registration'
    title: GDPRAddressedSystems
    example:
      systemName: RandomSystem
      systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
      manualBackend: true
      systemInstance: Country.RandomSystem.InstancIdentifier
  GDPRFindPersonData:
    type: object
    required:
    - country
    - criteria
    - taskId
    - timestamp
    properties:
      taskId:
        type: string
        example: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: GUID, created by GDPR BUS, unique for the original request
      timestamp:
        type: string
        example: 4/20/2017 1:58:32 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
      country:
        type: string
        example: CZE
        description: ISO country code 3*char
      criteria:
        type: array
        description: Data to search, encrypted
        items:
          $ref: '#/definitions/GDPRPersonIdentityData'
      manual:
        $ref: '#/definitions/ServiceNowTicketData'
    title: GDPRFindPersonData
    example:
      country: CZE
      criteria:
      - identificationArea: surname
        identificationValue: Novák
      - identificationArea: surname
        identificationValue: Novák
      manual:
        topTicketId: 69b667a5dbf85300d5abb14ffe9619c1
        taskURL: http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        transactionId: 7dbb84b34f013200be1430318110c7e8
      taskId: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
      timestamp: 4/20/2017 1:58:32 PM
  ServiceNowTicketData:
    type: object
    required:
    - taskURL
    - topTicketId
    - transactionId
    properties:
      topTicketId:
        type: string
        example: 69b667a5dbf85300d5abb14ffe9619c1
        description: GUID of the Workflow (top) ticket in Service Now.
      taskURL:
        type: string
        example: http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: URL of the task in the calling GDPR Bus.
      transactionId:
        type: string
        example: 7dbb84b34f013200be1430318110c7e8
        description: GUID of the transaction in Service Now.
    title: ServiceNowTicketData
    example:
      topTicketId: 69b667a5dbf85300d5abb14ffe9619c1
      taskURL: http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
      transactionId: 7dbb84b34f013200be1430318110c7e8
  GDPRmanualResponse:
    type: object
    properties:
      manualBackend:
        type: string
        description: ""
    title: GDPRmanualResponse
    example:
      resultCode: true
      errorCode: OK
      errorDescription: OK.
      manualBackend: ""
  GDPRForgetPersonRequest:
    type: object
    required:
    - identificationRecordIdValue
    - systemRegistrationId
    - taskId
    - timestamp
    properties:
      taskId:
        type: string
        example: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: GUID, created by GDPR BUS, unique for the original request.
      systemRegistrationId:
        type: string
        example: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        description: GUID, assigned by IPF during system subscription.
      timestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
      identificationRecordIdValue:
        type: string
        example: "27"
        description: The unique identifier of the person in providing back-end system.
      manual:
        $ref: '#/definitions/ServiceNowTicketData'
    title: GDPRForgetPersonRequest
    example:
      taskId: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
      systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
      timestamp: 2017-04-10T12:34:00.0000000Z
      identificationRecordIdValue: 27
      manual:
        topTicketId: 69b667a5dbf85300d5abb14ffe9619c1
        taskURL: http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        transactionId: 7dbb84b34f013200be1430318110c7e8
  GDPRProvidePersonDataRequest:
    type: object
    required:
    - identificationRecordIdValue
    - systemRegistrationId
    - taskId
    - timestamp
    properties:
      taskId:
        type: string
        example: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: GUID, created by GDPR BUS, unique for the original request.
      systemRegistrationId:
        type: string
        example: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        description: GUID, assigned by IPF during system subscription.
      timestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp when data are valid.
      identificationRecordIdValue:
        type: string
        example: "27"
        description: The unique identifier of the person in providing back-end system.
      manual:
        $ref: '#/definitions/ServiceNowTicketData'
    title: GDPRProvidePersonDataRequest
    example:
      taskId: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
      systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
      timestamp: 2017-04-10T12:34:00.0000000Z
      identificationRecordIdValue: 27
      manual:
        topTicketId: 69b667a5dbf85300d5abb14ffe9619c1
        taskURL: http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        transactionId: 7dbb84b34f013200be1430318110c7e8
  GDPRFindObsoletePersonDataRequest:
    type: object
    required:
    - country
    - taskId
    - timestamp
    properties:
      taskId:
        type: string
        example: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        description: GUID, created by GDPR BUS, unique for the original request
      timestamp:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Timestamp of the request. Current hardware clock of the calling system.
      country:
        type: string
        example: CZE
        description: ISO country code 3*char
      manual:
        $ref: '#/definitions/ServiceNowTicketData'
    title: GDPRFindObsoletePersonDataRequest
    example:
      taskId: 44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
      timestamp: 2017-04-10T12:34:00.0000000Z
      country: CZE
      manual:
        topTicketId: 69b667a5dbf85300d5abb14ffe9619c1
        taskURL: http://gdprbus.dr-max.global/gdpr/task/44e70a57-0fa0-4c99-b8f9-b4cbb78fb067
        transactionId: 7dbb84b34f013200be1430318110c7e8
  GDPRCommonResponse:
    type: object
    required:
    - resultCode
    properties:
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: GDPRCommonResponse
    example:
      resultCode: true
      errorCode: OK
      errorDescription: OK.
  GDPRStartWorkflowResponse:
    title: GDPRStartWorkflowResponse
    allOf:
    - $ref: '#/definitions/CommonResponse'
    - type: object
      required:
      - url
      properties:
        url:
          type: string
          example: https://gdprbus/abc-def
          description: url into gdprbus frontend
      example:
        resultCode: true
        errorCode: OK
        errorDescription: OK.
        url: https://gdprbus/abc-def
  GDPRSRegistredSystem:
    type: object
    required:
    - timestamp
    properties:
      timestamp:
        type: string
        description: ""
      systemRegistrationId:
        type: string
        example: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        description: GUID, assigned by IPF during system subscription.
    title: GDPRSRegistredSystem
    example:
      systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
      timestamp: 2017-04-20T13:58:32.0000000Z
  GDPRSystemResponse:
    type: object
    properties:
      systemRegistrationId:
        type: string
        example: 0046da06-bbf7-47a8-b6a6-6df962db1a75
        description: GUID, assigned by IPF during system subscription.
      timestamp:
        type: string
        description: ""
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: GDPRSystemResponse
    example:
      systemRegistrationId: 0046da06-bbf7-47a8-b6a6-6df962db1a75
      timestamp: 2017-04-20T13:58:32.0000000Z
      resultCode: true
      errorCode: OK
      errorDescription: OK.
  GDPRSystemAPI:
    type: object
    required:
    - apiName
    properties:
      apiName:
        $ref: '#/definitions/ApiName'
    title: GDPRSystemAPI
    example:
      apiName: findPersonAPI
  ApiName:
    type: string
    title: apiName
    example: findPersonAPI
    enum:
    - findPersonAPI
    - forgetPersonAPI
    - providePersonDataAPI
    - instanceHeartBeatAPI
    - findObsoletePersonAPI
    - taskStatusAPI
    x-enum-elements:
    - name: findPersonAPI
      description: API for person detection.
    - name: forgetPersonAPI
      description: API for person forgetting.
    - name: providePersonDataAPI
      description: API for person data extraction.
    - name: instanceHeartBeatAPI
      description: supplemental API for system's health checking.
    - name: findObsoletePersonAPI
      description: API for obsolete person
    - name: taskStatusAPI
      description: API for trigered check of task status
  GDPRSystemRequest:
    type: object
    required:
    - apiVersion
    - providedAPIs
    - rootPath
    - systemInstance
    - systemName
    - timestamp
    properties:
      systemName:
        type: string
        example: RandomSystem
        description: The name of the system to be subscribed to GDPR processes.
      systemInstance:
        type: string
        example: Country.RandomSystem.InstancIdentifier
        description: Instance identifier of the system to be subscribed to GDPR processes.
      apiVersion:
        type: string
        example: Major.Minor.Build
        description: API version implemented by the system.
      timestamp:
        type: string
        description: ""
      rootPath:
        type: string
        example: https://private-bc48fd-gdprbus.apiary-proxy.com
        description: Root URL for services
      providedAPIs:
        type: array
        description: List of supported GDPR services, including their endpoints.
        items:
          $ref: '#/definitions/GDPRSystemAPI'
    title: GDPRSystemRequest
    example:
      apiVersion: Major.Minor.Build
      systemName: RandomSystem
      rootPath: https://private-bc48fd-gdprbus.apiary-proxy.com
      providedAPIs:
      - apiName: findPersonAPI
      - apiName: findPersonAPI
      systemInstance: Country.RandomSystem.InstancIdentifier
      timestamp: timestamp
  GetAvailabilityOfSpecifiedProductResponse:
    title: Get availability of Specified Product response
    allOf:
    - $ref: '#/definitions/CommonResponse'
    - type: object
      properties:
        productId:
          type: number
          format: double
          example: 666111.0
          description: Id of the product.
        availableQuantity:
          type: number
          format: double
          example: 6.0
          description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
        availabilityType:
          $ref: '#/definitions/AvailabilityType'
        availabilityOnPharmacies:
          type: array
          description: Present if Availability Type is Stock
          items:
            $ref: '#/definitions/GetReversationProductAvailabilityItem'
      example:
        resultCode: true
        errorCode: OK
        errorDescription: OK.
        productId: 666111
        availableQuantity: 6
        availabilityType: Stock
        availabilityOnPharmacies:
        - pharmacyId: 666111
          availableQuantity: 6
          providesReservation: true
          isUpToDate: true
  GetAvailabilityOfSpecifiedProductListResponse:
    title: Get availability of Specified Product list response
    allOf:
    - $ref: '#/definitions/CommonResponse'
    - type: object
      properties:
        item:
          type: array
          description: List of availabl
          items:
            $ref: '#/definitions/GetStockProductAvailabilityItem'
      example:
        resultCode: true
        errorCode: OK
        errorDescription: OK.
        item:
        - productId: 666111
          availableQuantity: 6
          availabilityType: Stock
          availabilityOnPharmacies:
          - pharmacyId: 666111
            availableQuantity: 6
            providesReservation: true
            isUpToDate: true
  SetappverifiedRequest:
    type: object
    required:
    - appId
    properties:
      appId:
        type: string
        example: "123"
        description: ""
    title: setAppVerified request
    example:
      appId: 123
