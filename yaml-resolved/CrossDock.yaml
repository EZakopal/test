---
swagger: "2.0"
info:
  description: 'TODO: Add a description'
  version: "1.0"
  title: Dr. Max IPF
host: ipf.dr-max.global
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /eShop-services/api/v1/order:
    put:
      tags:
      - Shop
      summary: Create Order
      description: |-
        Creates new order object, in case of _Reservation type_ is passed into pharmacy (Farmis instance).
        Reservation object already exists in EShop DB and it is passed as a request body of this call.
      operationId: EShopServicesApiV1OrderPut
      produces:
      - application/json
      parameters:
      - name: orderId
        in: query
        description: Id of the order. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /eShop-services/api/v1/order/{orderId}:
    get:
      tags:
      - Shop
      summary: Get Order
      description: In case of eShop returns order object to the client. It retrieves the order object from EShop DB. (For now will be used for operations and monitoring purposses as weel as for debuging of issue)
      operationId: EShopServicesApiV1OrderByOrderIdGet
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: Id of the order. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/OrderWithCommonResponse'
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
      - Shop
      summary: Delete Order
      description: |-
        In Case of Reservation Type:
        Calls respective EShop and Farmis instance to delete the reservation objects in pharmacy.
        In Case of eShop destroy the persisted data on IPF, in future should be passed to other BackEnds
      operationId: EShopServicesApiV1OrderByOrderIdDelete
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: Id of the order. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: DELETE
          uri: /eShop-services/api/v1/order/123
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Delete Order1
        x-testDescription: |-
          In Case of Reservation Type:
          Calls respective EShop and Farmis instance to delete the reservation objects in pharmacy.
          In Case of eShop destroy the persisted data on IPF, in future should be passed to other BackEnds
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /eShop-services/api/v1/order/{orderId}/status:
    put:
      tags:
      - Shop
      summary: Update Order Status
      description: "Updates Order Status.\nIn case of Reservation Type: \nReservation\
        \ Status can be updated during reservation processing.\n- Reservation Status\
        \ has the value `Requested` when the reservation was created in EShop and\
        \ sent to respective Farmis instance via IPF.\n- Reservation Status can be\
        \ updated by Farmis. In this case, the reservation status value can be updated\
        \ to `PreparedForExpedition`, `Completed`, `Cancelled` or `InTrouble`.\n-\
        \ Reservation Status update can be updated by call centre when the reservation\
        \ has status `InTrouble`. In this case, the reservation status can be updated\
        \ to `Requested` or `Cancelled`.\nIn case of eShop Type:\nTODO:\nThe Order\
        \ life cycle should be described"
      operationId: EShopServicesApiV1OrderStatusByOrderIdPut
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: Id of the order. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/OrderStatusRequest'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
          schema:
            $ref: '#/definitions/CommonResponse'
      x-unitTests:
      - request:
          method: PUT
          uri: /eShop-services/api/v1/order/123/status
          headers:
            Content-Type: application/json
          body: '{  "orderStatus": "PreparedForExpedition",  "note": "OK",  "userName":
            "novak01"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK."}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Order Status1
        x-testDescription: "Updates Order Status.\nIn case of Reservation Type: \n\
          Reservation Status can be updated during reservation processing.\n- Reservation\
          \ Status has the value `Requested` when the reservation was created in EShop\
          \ and sent to respective Farmis instance via IPF.\n- Reservation Status\
          \ can be updated by Farmis. In this case, the reservation status value can\
          \ be updated to `PreparedForExpedition`, `Completed`, `Cancelled` or `InTrouble`.\n\
          - Reservation Status update can be updated by call centre when the reservation\
          \ has status `InTrouble`. In this case, the reservation status can be updated\
          \ to `Requested` or `Cancelled`.\nIn case of eShop Type:\nTODO:\nThe Order\
          \ life cycle should be described"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /eShop-services/api/v1/stock/{productId}:
    get:
      tags:
      - Shop
      summary: Get availability of Specified Product
      description: Returns stock items of specified product
      operationId: EShopServicesApiV1StockByProductIdGet
      produces:
      - application/json
      parameters:
      - name: productId
        in: path
        description: Id of the product. Primary key.
        required: true
        type: number
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: double
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              productId: 666111
              availableQuantity: 6
              availabilityType: Stock
              availabilityOnPharmacies:
              - pharmacyId: 666111
                availableQuantity: 6
                providesReservation: true
                isUpToDate: true
          schema:
            $ref: '#/definitions/GetAvailabilityOfSpecifiedProductResponse'
      x-unitTests:
      - request:
          method: GET
          uri: /eShop-services/api/v1/stock/123
          headers:
            Content-Type: application/json
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "productId":
            666111,  "availableQuantity": 6,  "availabilityType": "Stock",  "availabilityOnPharmacies":
            [    {      "pharmacyId": 666111,      "availableQuantity": 6,      "providesReservation":
            true,      "isUpToDate": true    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get availability of Specified Product1
        x-testDescription: Returns stock items of specified product
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /eShop-services/api/v1/stock/:
    post:
      tags:
      - Shop
      summary: Get availability of Specified Product list
      description: Returns stock items of specified product(s)
      operationId: EShopServicesApiV1StockPost
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: ""
        required: true
        type: string
      - in: body
        name: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/ListOfProducts'
      responses:
        200:
          description: ""
          examples:
            application/json:
              resultCode: true
              errorCode: OK
              errorDescription: OK.
              item:
              - productId: 666111
                availableQuantity: 6
                availabilityType: Stock
                availabilityOnPharmacies:
                - pharmacyId: 666111
                  availableQuantity: 6
                  providesReservation: true
                  isUpToDate: true
          schema:
            $ref: '#/definitions/GetAvailabilityOfSpecifiedProductListResponse'
      x-unitTests:
      - request:
          method: POST
          uri: /eShop-services/api/v1/stock/
          headers:
            Content-Type: application/json
          body: '{  "productId": [    "123"  ]}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{  "resultCode": true,  "errorCode": "OK",  "errorDescription": "OK.",  "item":
            [    {      "productId": 666111,      "availableQuantity": 6,      "availabilityType":
            "Stock",      "availabilityOnPharmacies": [        {          "pharmacyId":
            666111,          "availableQuantity": 6,          "providesReservation":
            true,          "isUpToDate": true        }      ]    }  ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get availability of Specified Product list1
        x-testDescription: Returns stock items of specified product(s)
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  CommonResponse:
    type: object
    required:
    - resultCode
    properties:
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: CommonResponse
    example:
      resultCode: true
      errorCode: OK
      errorDescription: OK.
  OrderStatus:
    type: string
    title: OrderStatus
    example: Basketed
    enum:
    - Basketed
    - Requested
    - PreparedForExpedition
    - Completed
    - Cancelled
    - InTrouble
    x-enum-elements:
    - name: Basketed
      description: ""
    - name: Requested
      description: ""
    - name: PreparedForExpedition
      description: ""
    - name: Completed
      description: ""
    - name: Cancelled
      description: ""
    - name: InTrouble
      description: ""
  OrderType:
    type: string
    title: OrderType
    example: eShop
    enum:
    - eShop
    - Reservation
    x-enum-elements:
    - name: eShop
      description: Standart order
    - name: Reservation
      description: Reservation on Pharmacy
  AvailabilityType:
    type: string
    title: availabilityType
    example: Stock
    enum:
    - Stock
    - CrossDock
    x-enum-elements:
    - name: Stock
      description: Standart stocks
    - name: CrossDock
      description: Supply chain
  OrderItem:
    type: object
    required:
    - additionalUnitPrice
    - orderItemId
    - productId
    - quantity
    - unitPrice
    - vatRate
    properties:
      orderItemId:
        type: number
        format: double
        description: Id of the item. Primary key.
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product. Foreign key.
      quantity:
        type: number
        format: double
        example: 5.0
        description: Quantity of the product.
      unitPrice:
        type: number
        format: double
        example: 25.0
        description: Unit price (incl. VAT) of the product.
      additionalUnitPrice:
        type: number
        format: double
        example: 35.0
        description: Additional unit price (incl. VAT) of the product.
      vatRate:
        type: number
        format: double
        example: 21.0
        description: VAT rate (percentage) of the product.
      rowDiscount:
        type: number
        format: double
        example: 0.0
        description: Total discount (incl. VAT) of the products on the row.
      couponId:
        type: number
        format: double
        example: 0.0
        description: Id of the discount coupon.
      productNote:
        type: string
        example: Note.
        description: Product note (colour, size).
      discountItems:
        type: array
        description: Discount items.
        items:
          type: string
    title: OrderItem
    example:
      unitPrice: 25.0
      discountItems:
      - discountItems
      - discountItems
      quantity: 5.0
      additionalUnitPrice: 35.0
      productId: 666111.0
      productNote: Note.
      orderItemId: 0.8008281904610115
      vatRate: 21.0
      rowDiscount: 0.0
      couponId: 0.0
  Order:
    type: object
    required:
    - customerFirstName
    - customerLastName
    - customerTown
    - dateTimeCreated
    - dateTimeReservationEnd
    - orderId
    - orderItems
    - pharmacyId
    - status
    - totalDiscount
    - totalPrice
    - totalRounding
    - totalVAT
    - typeOfOrder
    properties:
      orderId:
        type: number
        format: double
        example: 123.0
        description: Id of the reservation. Primary key.
      dateTimeCreated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was created.
      dateTimeReservationEnd:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Date and time when the reservation expires.
      status:
        $ref: '#/definitions/OrderStatus'
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      customerFirstName:
        type: string
        example: Jan
        description: First name of the customer.
      customerLastName:
        type: string
        example: Novák
        description: Last name of the customer.
      customerTown:
        type: string
        example: Praha
        description: 'Address of the customer: town (village).'
      orderItems:
        type: array
        description: Reservation items.
        items:
          $ref: '#/definitions/OrderItem'
      totalPrice:
        type: number
        format: double
        example: 575.0
        description: Total price (incl. VAT).
      totalVAT:
        type: number
        format: double
        example: 75.0
        description: Total VAT.
      totalDiscount:
        type: number
        format: double
        example: 575.0
        description: Total discount (incl. VAT).
      totalRounding:
        type: number
        format: double
        example: 0.0
        description: Total rounding amount (incl. VAT).
      typeOfOrder:
        $ref: '#/definitions/OrderType'
      dateTimeLastUpdated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was last updated.
      customerId:
        type: number
        format: double
        example: 123.0
        description: Id of the customer. Foreign key.
      customerLoyaltyCardId:
        type: string
        example: "123"
        description: Id of the customer loyalty card. Foreign key.
      customerStreet:
        type: string
        example: Dlouhá 21
        description: 'Address of the customer: street name (village name), house number.'
      customerEmail:
        type: string
        example: jan.novak@example.com
        description: Email address of the customer.
      customerPhone:
        type: string
        example: "420777123456"
        description: Phone number of the customer.
      customerNote:
        type: string
        example: Note from the customer.
        description: Note from the customer.
      loggedUser:
        type: number
        format: double
        example: 1.0
        description: Indicates, if the reservation has been filed by the user (1) or not (0).
    title: Order
    example:
      pharmacyId: 55.0
      orderId: 123.0
      totalPrice: 575.0
      dateTimeLastUpdated: 4/10/2017 12:34:00 PM
      customerStreet: Dlouhá 21
      loggedUser: 1.0
      totalRounding: 0.0
      orderItems:
      - unitPrice: 25.0
        discountItems:
        - discountItems
        - discountItems
        quantity: 5.0
        additionalUnitPrice: 35.0
        productId: 666111.0
        productNote: Note.
        orderItemId: 0.8008281904610115
        vatRate: 21.0
        rowDiscount: 0.0
        couponId: 0.0
      - unitPrice: 25.0
        discountItems:
        - discountItems
        - discountItems
        quantity: 5.0
        additionalUnitPrice: 35.0
        productId: 666111.0
        productNote: Note.
        orderItemId: 0.8008281904610115
        vatRate: 21.0
        rowDiscount: 0.0
        couponId: 0.0
      dateTimeReservationEnd: 4/15/2017 12:34:00 PM
      dateTimeCreated: 4/10/2017 12:34:00 PM
      totalVAT: 75.0
      customerPhone: "420777123456"
      customerFirstName: Jan
      customerEmail: jan.novak@example.com
      customerNote: Note from the customer.
      customerId: 123.0
      totalDiscount: 575.0
      customerLastName: Novák
      customerTown: Praha
      typeOfOrder: eShop
      status: Basketed
      customerLoyaltyCardId: "123"
  OrderWithCommonResponse:
    type: object
    properties:
      orderId:
        type: number
        format: double
        example: 123.0
        description: Id of the reservation. Primary key.
      dateTimeCreated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was created.
      dateTimeLastUpdated:
        type: string
        example: 4/10/2017 12:34:00 PM
        description: Date and time when the reservation was last updated.
      dateTimeReservationEnd:
        type: string
        example: 4/15/2017 12:34:00 PM
        description: Date and time when the reservation expires.
      status:
        $ref: '#/definitions/OrderStatus'
      pharmacyId:
        type: number
        format: double
        example: 55.0
        description: Id of the pharmacy. Foreign key.
      customerId:
        type: number
        format: double
        example: 123.0
        description: Id of the customer. Foreign key.
      customerLoyaltyCardId:
        type: string
        example: "123"
        description: Id of the customer loyalty card. Foreign key.
      customerFirstName:
        type: string
        example: Jan
        description: First name of the customer.
      customerLastName:
        type: string
        example: Novák
        description: Last name of the customer.
      customerStreet:
        type: string
        example: Dlouhá 21
        description: 'Address of the customer: street name (village name), house number.'
      customerTown:
        type: string
        example: Praha
        description: 'Address of the customer: town (village).'
      customerEmail:
        type: string
        example: jan.novak@example.com
        description: Email address of the customer.
      customerPhone:
        type: string
        example: "420777123456"
        description: Phone number of the customer.
      customerNote:
        type: string
        example: Note from the customer.
        description: Note from the customer.
      loggedUser:
        type: number
        format: double
        example: 1.0
        description: Indicates, if the reservation has been filed by the user (1) or not (0).
      orderItems:
        type: array
        description: Reservation items.
        items:
          $ref: '#/definitions/OrderItem'
      totalPrice:
        type: number
        format: double
        example: 575.0
        description: Total price (incl. VAT).
      totalVAT:
        type: number
        format: double
        example: 75.0
        description: Total VAT.
      totalDiscount:
        type: number
        format: double
        example: 575.0
        description: Total discount (incl. VAT).
      totalRounding:
        type: number
        format: double
        example: 0.0
        description: Total rounding amount (incl. VAT).
      typeOfOrder:
        $ref: '#/definitions/OrderType'
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: OrderWithCommonResponse
    example:
      errorDescription: OK.
      orderId: 123.0
      dateTimeLastUpdated: 4/10/2017 12:34:00 PM
      totalPrice: 575.0
      loggedUser: 1.0
      resultCode: true
      errorCode: OK
      orderItems:
      - unitPrice: 25.0
        discountItems:
        - discountItems
        - discountItems
        quantity: 5.0
        additionalUnitPrice: 35.0
        productId: 666111.0
        productNote: Note.
        orderItemId: 0.8008281904610115
        vatRate: 21.0
        rowDiscount: 0.0
        couponId: 0.0
      - unitPrice: 25.0
        discountItems:
        - discountItems
        - discountItems
        quantity: 5.0
        additionalUnitPrice: 35.0
        productId: 666111.0
        productNote: Note.
        orderItemId: 0.8008281904610115
        vatRate: 21.0
        rowDiscount: 0.0
        couponId: 0.0
      dateTimeCreated: 4/10/2017 12:34:00 PM
      customerPhone: "420777123456"
      totalVAT: 75.0
      customerEmail: jan.novak@example.com
      customerNote: Note from the customer.
      customerId: 123.0
      customerLastName: Novák
      typeOfOrder: eShop
      pharmacyId: 55.0
      customerStreet: Dlouhá 21
      totalRounding: 0.0
      dateTimeReservationEnd: 4/15/2017 12:34:00 PM
      customerFirstName: Jan
      totalDiscount: 575.0
      customerTown: Praha
      status: Basketed
      customerLoyaltyCardId: "123"
  OrderStatusRequest:
    type: object
    required:
    - orderStatus
    properties:
      orderStatus:
        $ref: '#/definitions/OrderStatus'
      note:
        type: string
        example: OK
        description: Note from the operator.
      userName:
        type: string
        example: novak01
        description: User name of the operator (pharmacy, call centre).
    title: OrderStatusRequest
    example:
      orderStatus: PreparedForExpedition
      note: OK
      userName: novak01
  GetStockProductAvailabilityItem:
    type: object
    required:
    - availabilityType
    - availableQuantity
    - productId
    properties:
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      availabilityType:
        $ref: '#/definitions/AvailabilityType'
      availabilityOnPharmacies:
        type: array
        description: Present if Availability Type is Stock
        items:
          $ref: '#/definitions/GetReversationProductAvailabilityItem'
    title: GetStockProductAvailabilityItem
  GetReversationProductAvailabilityItem:
    type: object
    required:
    - availableQuantity
    - isUpToDate
    - pharmacyId
    - providesReservation
    properties:
      pharmacyId:
        type: number
        format: double
        example: 666111.0
        description: Id of the pharmacy.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      providesReservation:
        type: boolean
        example: true
        description: True, if the pharmacy provides product reservations.
      isUpToDate:
        type: boolean
        example: true
        description: True, if the pharmacy is online and its stock item data is up-to-date.
    title: GetReversationProductAvailabilityItem
  AvailabilityWithCommonResponse:
    type: object
    properties:
      productId:
        type: number
        format: double
        example: 666111.0
        description: Id of the product.
      availableQuantity:
        type: number
        format: double
        example: 6.0
        description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
      availabilityType:
        $ref: '#/definitions/AvailabilityType'
      availabilityOnPharmacies:
        type: array
        description: Present if Availability Type is Stock
        items:
          $ref: '#/definitions/GetReversationProductAvailabilityItem'
      resultCode:
        type: boolean
        example: true
        description: 'Result code. True in case of success, false in case of error.
          Example: `true`.'
      errorCode:
        type: string
        example: OK
        description: 'Error code. Short string with unique value. Examples: `OK`,
          `IPF0001`.'
      errorDescription:
        type: string
        example: OK.
        description: 'Error description. It provides information about the reason
          of the error. Examples: `OK.`, `Internal error.`.'
    title: AvailabilityWithCommonResponse
  ListOfProducts:
    type: object
    required:
    - productId
    properties:
      productId:
        type: array
        description: List of productIds
        items:
          type: string
    title: ListOfProducts
    example:
      productId:
      - 123
  StockProductsAvailabilityList:
    type: object
    required:
    - item
    properties:
      item:
        type: array
        description: List of availabl
        items:
          $ref: '#/definitions/GetStockProductAvailabilityItem'
    title: StockProductsAvailabilityList
  GetAvailabilityOfSpecifiedProductResponse:
    title: Get availability of Specified Product response
    allOf:
    - $ref: '#/definitions/CommonResponse'
    - type: object
      properties:
        productId:
          type: number
          format: double
          example: 666111.0
          description: Id of the product.
        availableQuantity:
          type: number
          format: double
          example: 6.0
          description: Available quantity of the product at the pharmacy. Available quantity equals Total quantity minus Frozen quantity minus Reserved quantity.
        availabilityType:
          $ref: '#/definitions/AvailabilityType'
        availabilityOnPharmacies:
          type: array
          description: Present if Availability Type is Stock
          items:
            $ref: '#/definitions/GetReversationProductAvailabilityItem'
      example:
        resultCode: true
        errorCode: OK
        errorDescription: OK.
        productId: 666111
        availableQuantity: 6
        availabilityType: Stock
        availabilityOnPharmacies:
        - pharmacyId: 666111
          availableQuantity: 6
          providesReservation: true
          isUpToDate: true
  GetAvailabilityOfSpecifiedProductListResponse:
    title: Get availability of Specified Product list response
    allOf:
    - $ref: '#/definitions/CommonResponse'
    - type: object
      properties:
        item:
          type: array
          description: List of availabl
          items:
            $ref: '#/definitions/GetStockProductAvailabilityItem'
      example:
        resultCode: true
        errorCode: OK
        errorDescription: OK.
        item:
        - productId: 666111
          availableQuantity: 6
          availabilityType: Stock
          availabilityOnPharmacies:
          - pharmacyId: 666111
            availableQuantity: 6
            providesReservation: true
            isUpToDate: true
